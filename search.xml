<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git使用手册</title>
      <link href="/2020/08/03/gitNote/"/>
      <url>/2020/08/03/gitNote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="系统框图"><a href="#系统框图" class="headerlink" title="系统框图"></a>系统框图</h1><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="git工作流程"></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200802214658655.png" alt="image-20200802214658655"></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200802231847946.png" alt="image-20200802231847946"></p><h1 id="创建本地库"><a href="#创建本地库" class="headerlink" title="创建本地库"></a>创建本地库</h1><ul><li><input disabled="" type="checkbox"> <p>确定好本地库位置，git init 后，会产生.git 文件（隐藏文件）</p><p>注：.git文件==本地库（版本库），git所在的文件夹==工作区；git目录下的index文件==暂存区。</p></li><li><input disabled="" type="checkbox"> <p>配置签名命令(系统级别，全局可用，不同的项目都使用其作为标识)，远程仓库用来区分不同提交者身份。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//此name和email与github的用户名和邮箱无关，仅仅作为一个身份标识。</span><br><span class="line">//当然你也可以使用 github的用户名和邮箱</span><br><span class="line">git config --global user.name xxx</span><br><span class="line"></span><br><span class="line">git config --global user.email xxxx</span><br><span class="line"></span><br><span class="line">//会在 C:\Users\blueDam[你的电脑用户名] 路径下生成.gitconfig文件</span><br></pre></td></tr></table></figure><h1 id="关联远程库"><a href="#关联远程库" class="headerlink" title="关联远程库"></a>关联远程库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//查看与本地库关联的远程库</span><br><span class="line">git remote -v</span><br><span class="line">//如果为空，则没有相关联的远程库</span><br><span class="line"></span><br><span class="line">//给本地添加远程库关联</span><br><span class="line">git remote add origin  远程库地址</span><br><span class="line">//ps:origin 是此关联的名称，可自己修改，默认为origin。</span><br><span class="line">//ps:远程库地址==你点击 github code 按键时出现的url</span><br><span class="line"></span><br><span class="line">//添加完成后，此时在查看git remote -v 如下图。</span><br></pre></td></tr></table></figure><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803010541208.png" alt="image-20200803010541208"></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803010839041.png" alt="image-20200803010839041"></p><h1 id="从远程仓库取数据"><a href="#从远程仓库取数据" class="headerlink" title="从远程仓库取数据"></a>从远程仓库取数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone xxx-url</span><br><span class="line">&#x2F;&#x2F;执行后，系统会默认在&#96;下载下来的文件夹中&#96;，创建一个默认origin的远程库关联。无需自己添加。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从远程获取最新版本并合并到本地</span><br><span class="line">&#x2F;&#x2F;git pull&#x3D;&#x3D;git fetch &amp; git merge </span><br><span class="line">&#x2F;&#x2F;从origin 关联的master 分支上拉取</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><h1 id="提交远程过程"><a href="#提交远程过程" class="headerlink" title="提交远程过程"></a>提交远程过程</h1><ul><li>提交到暂存区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure><ul><li>提交到本地库 【将暂存区的文件提交到本地库】</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br><span class="line">//执行完此命令会出现 一个输入。本次输入内容为这次提交的说明。会显示在github中，如下图的 first。</span><br><span class="line">//一次完成提交文件和提交说明。-m 参数后面内容==说明</span><br><span class="line">git commit -m 'xxx'  文件名</span><br></pre></td></tr></table></figure><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803000808433.png" alt=""></p><ul><li>提交到远程仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;origin关联名  ；master 分支。</span><br><span class="line">git  push -u origin master</span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//查看分支信息</span><br><span class="line">git branch [-v]</span><br><span class="line"></span><br><span class="line">//创建分支</span><br><span class="line">git branch xxx-分支名</span><br><span class="line">//切换分支</span><br><span class="line">git checkout xxx-分支名</span><br><span class="line"></span><br><span class="line">//创建并切换</span><br><span class="line">git checkout -b xxx-分支名</span><br></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>1、切换到要接受修改的分支。即需要更新的分支；</p><p>2、执行merge 命令；</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">若在master分支下创建了mydev分支 ,</span><br><span class="line">git branch mydev</span><br><span class="line">此时mydev分支下完全复制了一份master【在哪个分支下创建就，复制谁】。</span><br><span class="line">切换到mydev 分支，</span><br><span class="line">git checkout mydev</span><br><span class="line">并作修改。</span><br><span class="line">此时 master 需要将mydev的修改更新到master中，</span><br><span class="line">1、git checkout master,切换到要更新的分支；</span><br><span class="line">2、git merge mydev【需要从哪个分支上更新内容】 。</span><br><span class="line">执行结束，master中就更新了mydev的内容。</span><br></pre></td></tr></table></figure><p>3、合并分支产生冲突</p><ul><li>冲突表现：</li></ul><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803020910846.png" alt="image-20200803020910846"></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803021044141.png" alt="image-20200803021044141"></p><ul><li>冲突处理</li></ul><p>1、打开冲突文件后，</p><p>HEAD 到等号的部分为当前分支与合并分支冲突部分；</p><p>等号到&gt;&gt;&gt; mydev(合并分支名称) 为合并文件与之冲突部分。</p><p>2、编辑文件，删除特殊符号【标记冲突的符号】，并修改内容。</p><p>3、手动修改好后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git  add  xxx-冲突文件名</span><br><span class="line"></span><br><span class="line">git commit -m &#39;说明日志&#39; [无需带文件名]</span><br></pre></td></tr></table></figure><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h2><p>可通过 git status 命令  </p><p>例：</p><p>若项目存放在名为 work/ 文件夹中</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200802235647121.png" alt="image-20200802235647121"></p><p>红色：表明文件位于<strong>工作区</strong>。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200802235906470.png" alt="image-20200802235912579"></p><p>绿色：表明文件位于<strong>暂存区</strong>。</p><h2 id="各工作空间文件操作"><a href="#各工作空间文件操作" class="headerlink" title="各工作空间文件操作"></a>各工作空间文件操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//从工作区和暂存区删除文件</span><br><span class="line">git rm xxx</span><br><span class="line"></span><br><span class="line">//  将暂存区的文件回复到工作区</span><br><span class="line">git rm --cached xxx</span><br><span class="line"></span><br><span class="line">//将暂存区文件覆盖工作区文件</span><br><span class="line">git checkout xxx</span><br><span class="line"></span><br><span class="line">//将本地库文件覆盖工作区</span><br><span class="line">git checkout HEAD xxx</span><br></pre></td></tr></table></figure><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803002946695.png" alt="image-20200803002946695"></p><h2 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//查看提交日志</span><br><span class="line">git log </span><br><span class="line">//更好看的显示</span><br><span class="line">git --pretty=oneline</span><br></pre></td></tr></table></figure><h2 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//与git log 不同在于，git log只有提交日志</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803004236493.png" alt="image-20200803004236493"></p><h2 id="复位版本"><a href="#复位版本" class="headerlink" title="复位版本"></a>复位版本</h2><p>具有文件找回功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//HEAD 可以看作一个指针，表明当前版本。如上图中的HEAD。</span><br><span class="line">git reset --hard xxx索引值</span><br><span class="line">//执行完毕后，`所有区域`都会回到指定的本版（即所有文件状态复位到第几次提交的内容）</span><br><span class="line">//ps:索引值==如上图最前面的哈希值，如5873d67</span><br><span class="line"> </span><br><span class="line">git reset --hard HEAD^</span><br><span class="line">^后退一个版本，有多少个^就后退多少</span><br><span class="line">git reset --hard HEAD~n</span><br><span class="line">n 表示后退n步</span><br></pre></td></tr></table></figure><h3 id="git-reset-–参数对比"><a href="#git-reset-–参数对比" class="headerlink" title="git reset –参数对比"></a>git reset –参数对比</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--soft </span><br><span class="line">仅仅在本地库移动HEAD指针</span><br><span class="line">--mixed</span><br><span class="line">在本地库移动HEAD指针</span><br><span class="line">重置暂存区</span><br><span class="line">--hard</span><br><span class="line">在本地库移动HEAD指针</span><br><span class="line">重置暂存区</span><br><span class="line">重置工作区</span><br></pre></td></tr></table></figure><h1 id="Git基本常用命令"><a href="#Git基本常用命令" class="headerlink" title="Git基本常用命令"></a>Git基本常用命令</h1><ul><li><code>mkdir</code> XX (创建一个空目录 XX指目录名)</li><li><code>pwd</code> 显示当前目录的路径。</li><li><code>git init</code> 把当前的目录变成可以管理的git仓库，生成隐藏.git文件。</li><li><code>git add XX</code> 把xx文件添加到暂存区去。</li><li><code>git commit –m “XX”</code> 提交文件 –m 后面的是注释。</li><li><code>git status</code> 查看仓库状态</li><li><code>git diff XX</code> 查看XX文件修改了那些内容</li><li><code>git log</code> 查看历史记录</li><li>git reset –hard HEAD  或者  git reset –hard HEAD~回退到上一个版本<ul><li>(如果想回退到100个版本，使用<code>git reset –hard HEAD~100</code> )</li></ul></li><li><code>cat XX</code> 查看XX文件内容</li><li><code>git reflog</code> 查看历史记录的版本号id</li><li><code>git checkout -- XX</code> 把XX文件在工作区的修改全部撤销。</li><li><code>git rm XX</code> 删除XX文件</li><li><code>git remote add origin</code> <a href="https://github.com/Victorschenwh/obe.git" target="_blank" rel="noopener">https://github.com/Victorschenwh/obe.git</a> 关联一个远程库</li><li><code>git push –u</code>(第一次要用-u 以后不需要) <code>origin maste</code>r 把当前master分支推送到远程库</li><li><code>git clone</code><a href="https://github.com/Victorschenwh/obe.git" target="_blank" rel="noopener">https://github.com/Victorschenwh/obe.git</a> 从远程库中克隆</li><li><code>git checkout –b dev</code> 创建dev分支 并切换到dev分支上</li><li><code>git branch</code> 查看当前所有的分支</li><li><code>git checkout master</code> 切换回master分支</li><li><code>git merge dev</code> 在当前的分支上合并dev分支</li><li><code>git branch –d dev</code> 删除dev分支</li><li><code>git branch name</code> 创建分支</li><li><code>git stash</code> 把当前的工作隐藏起来 等以后恢复现场后继续工作</li><li><code>git stash list</code> 查看所有被隐藏的文件列表</li><li><code>git stash apply</code> 恢复被隐藏的文件，但是内容不删除</li><li><code>git stash drop</code> 删除文件</li><li><code>git stash pop</code> 恢复文件的同时 也删除文件</li><li><code>git remote</code> 查看远程库的信息</li><li><code>git remote –v</code> 查看远程库的详细信息</li><li><code>git push origin master</code> Git会把master分支推送到远程库对应的远程分支上</li></ul><div class="note info">                      </div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题 Time-1</title>
      <link href="/2020/07/31/ExeCode-1/"/>
      <url>/2020/07/31/ExeCode-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 笔记</title>
      <link href="/2020/07/29/pythonNote/"/>
      <url>/2020/07/29/pythonNote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="str-amp"><a href="#str-amp" class="headerlink" title="str &amp; +"></a>str &amp; +</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#使用 “ + ”拼接时 ，只能时字符串和字符串之间的拼接。所以要使用 str()转换。</span></span><br><span class="line">print(<span class="string">"pirce is "</span>+str(<span class="number">10</span>))</span><br><span class="line">print(<span class="string">"keyword = "</span>+str([<span class="string">'False'</span>, <span class="string">'None'</span>])</span><br><span class="line"><span class="comment"># %s == str()</span></span><br><span class="line">print(<span class="string">"hello,%s,你好"</span> %(<span class="number">1234</span>))</span><br><span class="line">print(<span class="string">"hello,%s,你好"</span> %<span class="number">1234</span>)      <span class="comment">#有没有括号都可</span></span><br></pre></td></tr></table></figure><h1 id="python默认命名规则"><a href="#python默认命名规则" class="headerlink" title="python默认命名规则"></a>python默认命名规则</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apple_egg  <span class="comment">#</span></span><br></pre></td></tr></table></figure><h1 id="print"><a href="#print" class="headerlink" title="print"></a>print</h1><ul><li>print默认是打印完换行，可使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'aaa'</span>)   // 默认 end = <span class="string">'/n'</span></span><br><span class="line">print(<span class="string">'aaa'</span>, end=<span class="string">''</span>)   // 不换行</span><br><span class="line"><span class="comment">#可以使用  r''是''内部的字符串不转义 </span></span><br><span class="line">print(<span class="string">r'hello\n'</span>)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#hello\n</span></span><br></pre></td></tr></table></figure><ul><li>多语句输出</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多语句输出可用 “ ， ”分隔,默认都转换为string型输出。</span></span><br><span class="line">print(<span class="string">"dsf"</span>,num,<span class="string">"ddd"</span>)</span><br><span class="line">#结果：dsf 10 ddd</span><br></pre></td></tr></table></figure><ul><li>格式化输出</li></ul><p>格式化输出：%s ,%d ,%f，%x等；这里类似于C的格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'%.1f'</span> %(<span class="number">3.14</span>) )</span><br><span class="line">print(<span class="string">'%s'</span> %(<span class="number">3.14</span>) )</span><br><span class="line">name=<span class="string">'小明'</span></span><br><span class="line">age=<span class="number">22</span></span><br><span class="line">print(<span class="string">'我叫%s,今年我%03d岁! %%'</span>  %(name,age))</span><br><span class="line"><span class="comment">#我叫小明,今年我022岁! %</span></span><br><span class="line"><span class="comment">#用%%来表示要输出一个%，需要转义</span></span><br></pre></td></tr></table></figure><ul><li>format</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'我是&#123;&#125;'</span>.format(<span class="string">'Jam'</span>)</span><br><span class="line">str = <span class="string">'我是&#123;&#125;, 今年&#123;&#125;岁'</span>.format(name, age)</span><br></pre></td></tr></table></figure><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><ul><li><input disabled="" type="checkbox"> 如果<code>&#39;&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"i'm ok!"</span>)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#i'm ok!</span></span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> <p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code></p><p>用转义字符<code>\</code>来标识</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'i\'m \"ok\"!'</span>)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#i'm "ok"!</span></span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/PythonNote/image-20200728155546319.png" alt="">] </p><h3 id="不可变类型"><a href="#不可变类型" class="headerlink" title="不可变类型"></a>不可变类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'ABC'</span></span><br><span class="line">b = a</span><br><span class="line">a = <span class="string">'XYZ'</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#ABC</span></span><br></pre></td></tr></table></figure><p>执行过程：</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/PythonNote/image-20200728200741629.png" alt=""></p><h3 id="可变"><a href="#可变" class="headerlink" title="可变"></a>可变</h3><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><h3 id="ord-amp-char"><a href="#ord-amp-char" class="headerlink" title="ord() &amp;char()"></a>ord() &amp;char()</h3><ul><li><code>ord()</code>函数获取字符的整数表示。</li><li><code>chr()</code>函数把编码转换为对应的字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(ord(<span class="string">'A'</span>))</span><br><span class="line">print(ord(<span class="string">'中'</span>))</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#65 </span></span><br><span class="line"><span class="comment">#20013</span></span><br><span class="line">print(chr(<span class="number">65</span>))</span><br><span class="line">print(chr(<span class="number">20013</span>))</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#A</span></span><br><span class="line"><span class="comment">#中</span></span><br></pre></td></tr></table></figure><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><ul><li>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'1+2*3**5= '</span>,eval(<span class="string">'1+2*3**5'</span>))</span><br><span class="line"><span class="comment">#结果：1+2*3**5=  487</span></span><br></pre></td></tr></table></figure><p>eval()也可以实现字符串的解析：</p><ul><li>字符串—-&gt;列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">'[[1,2,3],[4,5,6]]'</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'type of str：'</span>,type(str))</span><br><span class="line">strA=eval(str)</span><br><span class="line">print(<span class="string">'type of strA：'</span>,type(strA))</span><br><span class="line"></span><br><span class="line"><span class="comment">#result: </span></span><br><span class="line"><span class="comment">#type of str： &lt;class 'str'&gt;</span></span><br><span class="line"><span class="comment">#type of strA： &lt;class 'list'&gt;</span></span><br></pre></td></tr></table></figure><ul><li>字符串—-&gt;字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"&#123;1: 'a', 2: 'b'&#125;"</span></span><br><span class="line">print(type(a))</span><br><span class="line">b = eval(a)</span><br><span class="line">print(type(b))</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#&lt;class 'str'&gt;</span></span><br><span class="line"><span class="comment">#&lt;class 'dict'&gt;</span></span><br></pre></td></tr></table></figure><ul><li>字符串—-&gt;元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"([1,2], [3,4], [5,6], [7,8], (9,0))"</span></span><br><span class="line">print(type(a))</span><br><span class="line">b=eval(a)</span><br><span class="line">print(type(b))</span><br><span class="line"><span class="comment">#result：</span></span><br><span class="line"><span class="comment">#&lt;class 'str'&gt;</span></span><br><span class="line"><span class="comment">#&lt;class 'tuple'&gt;</span></span><br></pre></td></tr></table></figure><h1 id="list-amp-tuple"><a href="#list-amp-tuple" class="headerlink" title="list &amp; tuple"></a>list &amp; tuple</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li><input disabled="" type="checkbox"> <p>列表，list是一种有序的集合，可以随时添加和删除其中的元素。</p></li><li><input disabled="" type="checkbox"> <p>list里面的元素的数据类型也可以不同。list 的元素也可是list【有点像二维数组】。</p></li></ul><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><h4 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h4><ul><li>len()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruit=[<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>]</span><br><span class="line"></span><br><span class="line">print(len(fruit))</span><br><span class="line"></span><br><span class="line"><span class="comment">#result： 3</span></span><br></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruit=[<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>]</span><br><span class="line">fruit[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#倒数第一个，同理也可fruit[-2]==倒数第二个</span></span><br><span class="line">fruit[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><ul><li>append()</li></ul><p>追加在list末尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruit=[<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>]</span><br><span class="line">fruit.append(<span class="string">'banana'</span>)</span><br><span class="line">print(fruit)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['apple','peach','orange','banana']</span></span><br></pre></td></tr></table></figure><ul><li>insert()</li></ul><p>插入指定位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruit=[<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>]</span><br><span class="line">fruit.insert(<span class="number">1</span>,<span class="string">'banana'</span>)</span><br><span class="line">print(fruit)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['apple','banana','peach','orange']</span></span><br></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><ul><li>pop()</li></ul><p>1、pop()，不加索引，删除list末尾元素。</p><p>2、pop(index)，加索引，删除list指定元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fruit=[<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>]</span><br><span class="line">fruit.pop()</span><br><span class="line">print(fruit)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['apple','peach']</span></span><br><span class="line"><span class="comment">#############</span></span><br><span class="line">fruit.pop(<span class="number">1</span>)</span><br><span class="line">print(fruit)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['apple','orange']</span></span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>sort(key=None, reverse=False)</li></ul><p>key–主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</p><p>reverse–排序规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">list_a=[<span class="string">'1'</span>,<span class="string">'3'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'2'</span>]</span><br><span class="line">list_a.sort()</span><br><span class="line">print(list_a)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['1', '2', '3', '6', '7']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">random = [(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">take_FeedBack</span><span class="params">(elem)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> elem[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># for i in random:</span></span><br><span class="line"><span class="comment">#     print(take_FeedBack(i))</span></span><br><span class="line">random.sort(key=take_FeedBack)</span><br><span class="line">print(<span class="string">'random ：'</span> ,random)</span><br><span class="line">random ： [(<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><ul><li><input disabled="" type="checkbox"> tuple和list非常类似，但是tuple一旦初始化就不能修改。</li><li><input disabled="" type="checkbox"> tuple里面的元素的数据类型也可以不同。tuple的元素也可是tuple【有点像二维数组】。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fruit=(<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>)</span><br><span class="line"><span class="comment">#如果你定义只有一个元素的tuple，不能写成</span></span><br><span class="line">t=(<span class="string">'apple'</span>)</span><br><span class="line">print(type(t))</span><br><span class="line"><span class="comment">#否则 t 就是个普通的字符串(或者其他基本数据类型) </span></span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#&lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#必须写成 带个 `,`的形式</span></span><br><span class="line">t=(<span class="string">'apple'</span>,)</span><br><span class="line">print(type(t))</span><br><span class="line"><span class="comment">#&lt;class 'tuple'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="‘可变的’tuple"><a href="#‘可变的’tuple" class="headerlink" title="‘可变的’tuple"></a>‘可变的’tuple</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tuple是不可变的，但我们可以添加可变的元素。</span></span><br><span class="line">t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line">t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line">t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'Y'</span></span><br><span class="line">print(t)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'X'</span>, <span class="string">'Y'</span>])</span><br></pre></td></tr></table></figure><p>注意：</p><p>只有添加了可变数据类型才能这么改，否则无效。因为不变数据类型的地址在改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tTwo=(<span class="string">'apple'</span>,name,age,[<span class="string">'A'</span>,<span class="string">'B'</span>],&#123;<span class="string">'a'</span>:<span class="string">'好的'</span>,<span class="string">'b'</span>:<span class="string">'一般'</span>&#125;)</span><br><span class="line">tTwo[<span class="number">3</span>][<span class="number">0</span>]=<span class="string">'K'</span></span><br><span class="line">tTwo[<span class="number">4</span>][<span class="string">'a'</span>]=<span class="string">'不好'</span></span><br><span class="line">print(tTwo)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#('apple', '小明', 22, ['K', 'B'], &#123;'a': '不好', 'b': '一般'&#125;)</span></span><br></pre></td></tr></table></figure><h1 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h1><h2 id="dict和list比较"><a href="#dict和list比较" class="headerlink" title="dict和list比较"></a>dict和list比较</h2><p>dict有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而list相反：</p><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。</li></ol><p>注：</p><p>key 必须为不可变数据类型，如整数，字符串等</p><h2 id="判断键值是否存在"><a href="#判断键值是否存在" class="headerlink" title="判断键值是否存在"></a>判断键值是否存在</h2><ul><li>get(key)</li></ul><p>有key，则return key_value; 无key，则return None</p><ul><li>get(key, return flag)</li></ul><p>有key，则return key_value; 无key，则return 指定的return flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict_one = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br><span class="line">print(dict_one.get(<span class="string">'Bob'</span>,<span class="number">-1</span>))</span><br><span class="line"><span class="comment">#print(dict_one.get('Bobb','啥都没有'))</span></span><br><span class="line">print(dict_one[<span class="string">'Bob'</span>])</span><br><span class="line"><span class="comment">#75</span></span><br><span class="line"><span class="comment">#啥都没有</span></span><br><span class="line"><span class="comment">#75</span></span><br></pre></td></tr></table></figure><h2 id="获取所有键值"><a href="#获取所有键值" class="headerlink" title="获取所有键值"></a>获取所有键值</h2><ul><li>keys() </li></ul><p>以列表返回一个字典的所有的键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_a=&#123;<span class="string">'name'</span>:<span class="number">1</span>,<span class="string">'age'</span>:<span class="number">2.3</span>,<span class="string">'year'</span>:<span class="number">4</span>&#125;</span><br><span class="line">print(dict_a.keys())</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#dict_keys(['name', 'age', 'year'])</span></span><br></pre></td></tr></table></figure><h2 id="获取所有数值"><a href="#获取所有数值" class="headerlink" title="获取所有数值"></a>获取所有数值</h2><ul><li>values()</li></ul><p>以列表返回字典中的所有值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_a=&#123;<span class="string">'name'</span>:<span class="number">1</span>,<span class="string">'age'</span>:<span class="number">2.3</span>,<span class="string">'year'</span>:<span class="number">4</span>&#125;</span><br><span class="line">print(dict_a.values())</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#dict_values([1, 2.3, 4])</span></span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_a=&#123;<span class="string">'name'</span>:<span class="number">1</span>,<span class="string">'age'</span>:<span class="number">2.3</span>,<span class="string">'year'</span>:<span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dict_a[<span class="string">'Name'</span>]  <span class="comment"># 删除键是'Name'的条目</span></span><br><span class="line">dict_a.clear()     <span class="comment"># 清空字典所有条目</span></span><br><span class="line"><span class="keyword">del</span> dict          <span class="comment"># 删除字典</span></span><br></pre></td></tr></table></figure><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><ul><li><input disabled="" type="checkbox"> set可以看成数学意义上的无序和无重复元素的集合，无序的。</li><li><input disabled="" type="checkbox"> set和dict类似，也是一组key的集合，但不存储value。不可以放入可变对象。</li><li><input disabled="" type="checkbox"> 创建一个set，需要提供一个list作为输入集合。</li><li><input disabled="" type="checkbox"> 重复元素在set中自动被过滤。</li><li><input disabled="" type="checkbox"> 元素类型要一致</li></ul><h2 id="运算-1"><a href="#运算-1" class="headerlink" title="运算"></a>运算</h2><h3 id="amp-交集"><a href="#amp-交集" class="headerlink" title="&amp; 交集"></a>&amp; 交集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set_one=set([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">set_tow=set([<span class="string">'a'</span>,<span class="string">'4'</span>,<span class="string">'d'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>])</span><br><span class="line">print(set_one &amp; set_tow)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#&#123;'d', 'a'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="并集"><a href="#并集" class="headerlink" title="| 并集"></a>| 并集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set_one=set([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">set_tow=set([<span class="string">'a'</span>,<span class="string">'4'</span>,<span class="string">'d'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>])</span><br><span class="line">print(set_one | set_tow)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#&#123;'7', 'b', 'c', '4', '6', 'd', 'a'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h2><ul><li>add(key)</li></ul><h2 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h2><ul><li>remove(key)</li></ul><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><ul><li>repalce(old,new[,max])</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str_b=<span class="string">'random'</span></span><br><span class="line">str_c=str_b.replace(<span class="string">'r'</span>,<span class="string">'R'</span>)</span><br><span class="line">print(<span class="string">'str_b==%s ，str_c==%s'</span> %(str_b,str_c))</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#str_b==random ，str_c==Random</span></span><br><span class="line"></span><br><span class="line">str_b=<span class="string">'rrrrom'</span></span><br><span class="line">str_c=str_b.replace(<span class="string">'r'</span>,<span class="string">'R'</span>,<span class="number">2</span>)</span><br><span class="line">print(<span class="string">'str_b==%s ，str_c==%s'</span> %(str_b,str_c))</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#str_b==rrrrom ，str_c==RRrrom</span></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_test</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="comment">#isinstance 检测参数 x 是否为符合（）中的内容。</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x,(int,float)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'illegal param'</span>)</span><br><span class="line">    <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">if</span> x&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">print(my_test(<span class="number">-1.2</span>))</span><br></pre></td></tr></table></figure><h2 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    _sqrt=math.sqrt(b**<span class="number">2</span><span class="number">-4</span>*a*c)</span><br><span class="line">    result_plus = (-b + _sqrt) /(<span class="number">2.0</span> * a)</span><br><span class="line">    result_sub = (-b - _sqrt) / (<span class="number">2.0</span> * a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result_plus,result_sub</span><br><span class="line">print(type(quadratic(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>)))</span><br><span class="line"><span class="comment">#当函数返回多个值，是以tuple的方式返回的。</span></span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#&lt;class 'tuple'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p> <code>定义默认参数要牢记一点：默认参数必须指向不变对象！</code>,否则需要特殊处理。</p><p>错误使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认参数L=[]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line">正常调用时：</span><br><span class="line"><span class="comment">#自己添加参数，不用默认参数。</span></span><br><span class="line">add_end([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'END'</span>]</span><br><span class="line">add_end([<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>])</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['x', 'y', 'z', 'END']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用默认参数调用</span></span><br><span class="line">add_end()</span><br><span class="line">[<span class="string">'END'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#但再次调用时，就错误了</span></span><br><span class="line">add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>]</span><br><span class="line">add_end()</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#['END', 'END', 'END']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#因为list时可变数据类型，每次调用就增添一个 END。</span></span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul><li><h6 id="如果参数个数不确定可以把参数组装为一个list或tuple传进去。"><a href="#如果参数个数不确定可以把参数组装为一个list或tuple传进去。" class="headerlink" title="如果参数个数不确定可以把参数组装为一个list或tuple传进去。"></a>如果参数个数不确定可以把参数组装为一个list或tuple传进去。</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_test</span><span class="params">(parms)</span>:</span></span><br><span class="line">print(parms)</span><br><span class="line"><span class="comment">#先将要传的参数组装成一个list或者tuple</span></span><br><span class="line">my_parms=[<span class="number">1</span>,<span class="string">'Mike'</span>,name]</span><br><span class="line"><span class="comment">#作为一个参数传进去，系统会把传进来的参数，打包成tuple的形式，供用户自己处理和使用。</span></span><br><span class="line">function_test(my_parms)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#(1,'Mike',name)</span></span><br></pre></td></tr></table></figure><ul><li><h6 id="如果使用可变参数就可以简化，不用事先把参数组装。"><a href="#如果使用可变参数就可以简化，不用事先把参数组装。" class="headerlink" title="如果使用可变参数就可以简化，不用事先把参数组装。"></a>如果使用<u><code>可变参数</code></u>就可以简化，不用事先把参数组装。</h6></li></ul><p>具体实现：参数前面加个  ’  *  ‘。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_test</span><span class="params">(*parms)</span>:</span></span><br><span class="line">print(parms)</span><br><span class="line"><span class="comment">#无需事先组装</span></span><br><span class="line"><span class="comment">#把需要的参数直接传入，系统会把传进来的参数，打包成tuple的形式，供用户自己处理和使用。</span></span><br><span class="line">function_test(<span class="number">1</span>,<span class="string">'Mike'</span>,name)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#(1,'Mike',name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果已有了一个lsit或tuple，也可调用可变参数函数。</span></span><br><span class="line"><span class="comment">#具体实现：在list或者tuple前添加 ’*‘。</span></span><br><span class="line">my_parms=[<span class="number">1</span>,<span class="string">'Mike'</span>,name]</span><br><span class="line">function_test(*my_parms)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#(1,'Mike',name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不加 "*",可变参数函数系统会默认把传入的list，当作一个整体，再打包成一个tuple</span></span><br><span class="line">my_parms=[<span class="number">1</span>,<span class="string">'Mike'</span>,name]</span><br><span class="line">function_test(my_parms)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#((1,'Mike',name),)</span></span><br></pre></td></tr></table></figure><h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><ul><li><input disabled="" type="checkbox"> 可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</li></ul><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><ul><li>方法一</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_parm_test</span><span class="params">(**kw)</span>:</span></span><br><span class="line">    print(type(kw))</span><br><span class="line">    print(kw)</span><br><span class="line">dict_a=&#123;<span class="string">'name'</span>:<span class="number">1</span>,<span class="string">'age'</span>:<span class="number">2.3</span>,<span class="string">'year'</span>:<span class="number">4</span>&#125;</span><br><span class="line">key_parm_test(**dict_a)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#&lt;class 'dict'&gt;</span></span><br><span class="line"><span class="comment">#&#123;'name': 1, 'age': 2.3, 'year': 4&#125;</span></span><br></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_parm_test</span><span class="params">(**kw)</span>:</span></span><br><span class="line">    print(type(kw))</span><br><span class="line">    print(kw)</span><br><span class="line">key_parm_test(name=<span class="number">1</span>,age=<span class="number">2.3</span>,year=<span class="number">4</span>)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#&lt;class 'dict'&gt;</span></span><br><span class="line"><span class="comment">#&#123;'name': 1, 'age': 2.3, 'year': 4&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读消费社会有感</title>
      <link href="/2020/07/25/blog-05/"/>
      <url>/2020/07/25/blog-05/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><p><strong>让·鲍德里亚把人们消费的欲望刨析的十分深刻。但我觉得消费社会是必然也是必须。没有人们近乎疯狂的消费欲望，大概率不会有现代社会。而生产力的不断发展，消费品必定泛滥。所以说消费社会的存在是合理的。</strong></p><p><strong>但是有个问题，卖家为了创造人们消费的欲望，于是不断的塑造出眼花缭乱的消费品。于是乎，人们慢慢失去了对价值观的标准选择权。他们被卖家拿去。回头看看如今市面上的所有消费品都是“人造的”。卖家生产什么我们就只能选择什么。所谓的潮流，也都是“人云亦云”。卖家给了我们一个“虚幻的自由选择权力”，他们选择的，才是我们的选择。然后潜移默化的影响着每个人。比如，结婚需要穿婚纱。尽管会有人说你不穿婚纱，不还是要穿凤冠霞帔。对，问题就在这里。人与人的关系本来就是统治与被统治的关系，只是谁是统治者谁是被统治者的问题。那为什么要把这个机会让给别人呢。</strong></p><div class="note info">                      </div>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消费社会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同电脑与同个github仓库同步</title>
      <link href="/2020/07/24/blog-04/"/>
      <url>/2020/07/24/blog-04/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>由于换了新的电脑，想同时实现使用 原电脑 和 新电脑 都可发布博客。</strong></p><div class="note primary no-icon">                      </div><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p><strong>将原电脑存放blog的整个文件夹复制一份；</strong></p><p><strong>将C:\Users\原电脑用户名\下的 ① <u>“  .ssh ”文件夹</u>；②<u>“ .gitconfig ”文件</u>；③<u>“ .npmrc ”文件</u>。④“原博客本地仓库”</strong></p><h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><p><strong>①中存放原电脑与Blog仓库配对后生成的SSH的密钥；</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//原电脑通过此命令配置的</span><br><span class="line">//这里直接复制.ssh文件后，无需执行此命令</span><br><span class="line">//【千万不能执行，否则SSH密钥就不同了，无法与原博客仓库配对】。</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><strong>②中是github的用户名和邮箱地址；</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//原电脑通过此命令配置，生成了.gitconfig文件</span><br><span class="line">//这里直接复制.gitconfig文件后，无需执行此命令</span><br><span class="line">//用户名和邮箱都是你github的用户名和邮箱</span><br><span class="line">git config --global user.name "你的用户名"</span><br><span class="line">git config --global user.email “你的邮箱”</span><br></pre></td></tr></table></figure><p><strong>③中将npm 下载路径改为了国内镜像taobao，方便下载。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//原电脑通过此命令配置，生成了.npmrc文件</span><br><span class="line">//这里直接复制.npmrc文件后，无需执行此命令</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><strong>④中存放原本地仓库中的文件。也可通过git 命令同步到本地，但是不方便。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库地址</span><br></pre></td></tr></table></figure><h2 id="新电脑新建文件夹"><a href="#新电脑新建文件夹" class="headerlink" title="新电脑新建文件夹"></a>新电脑新建文件夹</h2><p><strong>新电脑上找到你要放置本地仓库的路径。然后开始。</strong></p><p><strong>在git bash 中将当前路径切换到，你要放置本地仓库文件夹上一级。</strong></p><p><strong>例：你想放在E:/mybog文件夹下，则 cd  /e。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装hexo框架</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等上一个命令完成后，在输入下面的命令</span></span><br><span class="line">hexo init &lt;文件夹的名称&gt;  #初始化文件夹,【无需手动创建】。</span><br><span class="line">cd &lt;新建文件夹的名称&gt;</span><br><span class="line">npm install  # 安装博客所需要的依赖文件</span><br></pre></td></tr></table></figure><h2 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h2><p><strong>将原电脑复制的文件，原封不动的粘贴到每个文件对应的路径中。</strong></p><p><strong>完成后可以通过此命令，看是否添加本地成功。若回复中 Hi后面是你的用户名，就OK。其他信息可忽略。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//测试联通性</span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github.com</span></span><br></pre></td></tr></table></figure><h2 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h2><p><strong>安装hexo-deployer-git 插件，将博客部署到git上。【无此插件，就无法部署】</strong></p><p><strong>在本地博客仓库目录下，运行命令。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><h1 id="此时就可在新电脑上发布博客了。"><a href="#此时就可在新电脑上发布博客了。" class="headerlink" title="此时就可在新电脑上发布博客了。"></a>此时就可在新电脑上发布博客了。</h1><div class="note info">                      </div>]]></content>
      
      
      <categories>
          
          <category> blog搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小记</title>
      <link href="/2020/07/24/blog-03/"/>
      <url>/2020/07/24/blog-03/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><p>​    <strong>虽然很长一段时间我都发觉自己心浮气躁，但懒于或者说畏惧面对。可是最近几天察觉到这个问题，已经显而易见的影响到我的整个生活节奏。于是，想到了读本书。我这才发觉，已经很久没有碰除课本和专业书籍以外的书了。如果说原因的话，可能我已经习惯了”快生活”。看个视频都要开2倍速，又哪来的耐心一字一句的读书呢？每次遇到问题也都习惯性去找个别人整理好的“快速手册”。好像周围的人也这样！于是把我的心养“快”了。我想不心浮气躁也就怪了。</strong></p><p>​    <strong>看电影也曾是我觉得可以使心慢下来的选择之一。然而，突然记起朋友说：“看电影很枯燥，因为所有的情节画面都是设定好的，毫无想象力。我那时对这个说法嗤之以鼻，甚至心里嘲笑他的“无知”。可此刻我突然意识到这句话才是我为什么心浮气躁的深层原因，对此我总结出“人云亦云”。</strong></p><p>​    <strong>人家说啥即是啥，慢慢放弃了自我思考。无论什么都百度一下。于是如浮萍一样，飘荡在人海中。于是便心浮气躁，抓不着“根”。更别提“一千人眼中有一千个哈姆雷特”的乐趣了。</strong></p><p>​    <strong>今天记录下，愿自己不骄不躁，捧起书。</strong></p><div class="note info">                      </div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死亡</title>
      <link href="/2020/07/02/blog-02/"/>
      <url>/2020/07/02/blog-02/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="死亡"><a href="#死亡" class="headerlink" title="死亡"></a>死亡</h1><p><strong>关于死亡：</strong><br>    <strong>不知道第几次又想到这个话题，看到这两个字都会心紧紧提起，肥肉狂抖。</strong></p><p>​    <strong>第一次对死亡这件事有概念，大概是记忆里外婆家的小西屋里似乎住着一个拄着拐杖的老太，一身黑色的衣服，看不清脸，可能是男老太或是女老太，今年问起外公才知道他们先后都住过。后来小西屋就变成了杂物间，冬天可以在那里烤炉子，烤红薯，烤馒头，还烫化了我的一双棉靴的鞋底。再后来，外婆也住进了那间小西屋，窗台外放着一个黄色的皮沙发，冬天可以在那里晒太阳。</strong></p><p>​    <strong>第一次对死亡这件事有画面，是初中还是高中，半夜做梦哭醒。梦见死后的葬礼，我的墓碑前站着一片穿着黑色的人，我不知道自己是一颗粒子还是缩小的自己。时代像放电影一样x N倍速播放，我飘到了🌍的最外圈，地球在自转，我在看，地球在公转，我在看，一直在看。这个画面伴随我到现在，偶尔也会重复这个梦，更多的是最后那个在地球外看着它转的瞬间，空无一人之境的荒寂，总会让我的肌肉不由自主的抖动。</strong></p><p>​    <strong>他们劝我说，没有人能逃过死亡。我知道，可是我知道和我不能接受这两件事并不冲突，每一次提起我都有第一次的紧张感，和更紧张的肌肉反应。也许我能。</strong></p><div class="note info">            <p>~来自龙猫小姐的兔子朋友的祝福</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜</title>
      <link href="/2020/07/01/blog-01/"/>
      <url>/2020/07/01/blog-01/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="夜"><a href="#夜" class="headerlink" title="夜"></a>夜</h1><p><strong>关于夜晚：</strong></p><p><strong>突然觉得用万籁俱寂来形容乡村的夏天夜晚是不太恰当的。</strong></p><p><strong>傍晚六点，躲避了一天太阳的人们趁着夕阳的余晖串门聊天；洗漱完成后，七点钟，每家每户响起了新闻联播的声音，这似乎是没有网上冲浪的人们得知外界新鲜消息的唯一途径；七点三十五分，天气预报也是必选节目，得知未来几天的天气走向是农民的每日必做题；到了九点，村子里的大部分生物都进入了一天的休息模式，但总有一些不从众的动物，听取蛙声一片是非常准确的，不论走到哪里都好像走进了蛙圈，不知道谁家的狗会叫几声亮亮嗓子，还是在和没睡的同伴交流着什么。</strong></p><p><strong>夜晚的风好像都是会呼吸的，总觉得风带来了一些什么声音，静下来仔细去听总是若有若无的。不知道还能再看几次这样的夜晚，有一枚特别亮的月亮，几十颗闪闪发光的星星和特别黑的夜晚。星星，这个词语真的很适合描述这个事物，它亮了一段时间之后就会灭掉，一瞬间融入黑夜之中，好像那儿什么都没有出现过。</strong></p><div class="note info">            <p>~来自龙猫小姐的兔子朋友的祝福</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>aboutMe</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><p>本站建于2020 年07 夏。</p><p>本人普普通通，这也是本站被叫做DIDI的原因之一。（当然还有其他因素）</p><p>不知道为什么搭建了此站，就像你也不知道为何就来到了这里。~缘分😄</p><div class="note warning">            <p>寄 语</p>          </div><p>时间是我们唯一的财富。让我们好好生活，勤于学习吧。</p><div class="note info">            <p>PigG</p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>说点什么吧~</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[<p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/kwxz16.jpg" alt=""></p><div class="note danger">            <p>悄悄话：~ 你很棒！</p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Gallery</title>
      <link href="/photoes/index.html"/>
      <url>/photoes/index.html</url>
      
        <content type="html"><![CDATA[<br/><div class="note primary no-icon">                      </div><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src='https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/qdjqyq.jpg'>  <figcaption>  <div class="gallery-group-name">壁紙</div>  <p>收藏的一些壁紙</p>  <a href='/photoes/wallpaper/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg'>  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>關於漫威的圖片</p>  <a href='/photoes/marvel/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src='https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/x1d7l3.jpg'>  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>關於MY GIRL的圖片</p>  <a href='/photoes/girls/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src='https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/1j1ez9.jpg'>  <figcaption>  <div class="gallery-group-name">TopImg</div>  <p>标题图片</p>  <a href='/photoes/BlogBG/'></a>  </figcaption>  </figure>  </div><br/><div class="note info">                      </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>BlogBG</title>
      <link href="/photoes/BlogBG/index.html"/>
      <url>/photoes/BlogBG/index.html</url>
      
        <content type="html"><![CDATA[<br/><div class="note primary no-icon">                      </div><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/42e9m9.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/45wrg9.png" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/nzr55g.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/1j1ez9.jpg" alt=""></p><br/><div class="note info">                      </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>girls</title>
      <link href="/photoes/girls/index.html"/>
      <url>/photoes/girls/index.html</url>
      
        <content type="html"><![CDATA[<br/><div class="note primary no-icon">                      </div><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/x1d7l3.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/lmkeey.png" alt=""></p><br/><div class="note info">                      </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>marvel</title>
      <link href="/photoes/marvel/index.html"/>
      <url>/photoes/marvel/index.html</url>
      
        <content type="html"><![CDATA[<br/><div class="note primary no-icon">                      </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>wallpaper</title>
      <link href="/photoes/wallpaper/index.html"/>
      <url>/photoes/wallpaper/index.html</url>
      
        <content type="html"><![CDATA[<br/><div class="note primary no-icon">                      </div><div class="justified-gallery"><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/lmkeey.png" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/39gr53.jpg" alt=""></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/4ve7dl.jpg" alt=""></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/eo19kw.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/g8drv7.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/kwxz16.jpg" alt=""></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/ne78w4.jpg" alt=""></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/qdjqyq.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/x1d7l3.jpg" alt=""></p>          </div><br/><div class="note info">                      </div>]]></content>
      
    </entry>
    
    
  
</search>
