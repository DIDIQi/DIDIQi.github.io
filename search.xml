<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JSP是否过时</title>
      <link href="/2020/09/11/JspDiffHtml/"/>
      <url>/2020/09/11/JspDiffHtml/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="JSP是否过时"><a href="#JSP是否过时" class="headerlink" title="JSP是否过时"></a>JSP是否过时</h1><p>​        以前的项目大多数都是java程序猿又当爹又当妈，又搞前端（ajax/jquery/js/html/css等等），又搞后端（java/mysql/Oracle等等）。</p><p>​        随着时代的发展，渐渐的许多大中小公司开始把前后端的界限分的越来越明确，前端工程师只管前端的事情，后端工程师只管后端的事情，正所谓术业有专攻，一个人如果什么都会，那么他毕竟什么都不精。</p><p>​    大中型公司需要专业人才，小公司需要全才，但是对于个人职业发展来说，我建议是分开。你要是这辈子就吃java这碗饭，就不要去研究什么css，js等等。</p><p>​        把你的精力专注在java，jvm原理，spring原理，mysql锁，事务，多线程，大并发，分布式架构，微服务，以及相关的项目管理等等，这样你的核心竞争力才会越来越高，正所谓你往生活中投入什么，生活就会反馈给你什么。</p><p>（满满的正能量：</p><p>一旦你成为了一个行业里的精英，相信我，到时候，车，房，女人，钱，机会就都来找你了，不用着急，真的。</p><p>干java程序猿这行，真的很简单的，你懂得知识越多，你的钱就越多，当然了还需要有一定的情商。。。</p><p>你的能力越强，你就比别人创造的价值更多，你为公司创造了价值，公司给你各种福利，双赢！）</p><p>几曾何时，我们的java web项目都是使用了若干后台框架，springmvc/struts + spring + spring jdbc/hibernate/mybatis 等等</p><p>大多数项目在java后端都是分了三层，控制层（controller/action），业务层（service/manage），持久层（dao）。</p><p>控制层负责接收参数，调用相关业务层，封装数据，以及路由到jsp页面。然后jsp页面上使用各种标签（jstl/el）或者手写java（&lt;%=%&gt;）将后台的数据展现出来。对吧？</p><p>我们先看这种情况，需求定完了，代码写完了，测试测完了，然后呢？要发布了吧？</p><p>你需要用maven或者eclipse等工具把你的代码打成一个war包，然后把这个war包发布到你的生产环境下的web容器（<br>tomcat/jboss/weblogic/websphere/jetty/resin）里，对吧？</p><p>发布完了之后，你要启动你的web容器，开始提供服务，这时候你通过配置域名，dns等等相关，你的网站就可以访问了（假设你是个网站）。</p><h1 id="gt-gt-gt-正题"><a href="#gt-gt-gt-正题" class="headerlink" title="===&gt;&gt;&gt;正题"></a>===&gt;&gt;&gt;正题</h1><p>那我们来看，你的前后端代码是不是全都在那个war包里？包括你的js，css，图片，各种第三方的库，对吧？</p><p>好，下面在浏览器中输入你的网站域名（<a href="http://www.xxx.com），之后发生了什么？（这个问题也是很多公司的面试题）">www.xxx.com），之后发生了什么？（这个问题也是很多公司的面试题）</a></p><p>我捡干的说了啊，基础不好的童鞋请自己去搜。</p><p>浏览器在通过ip路由到你的服务，在tcp3次握手之后，通过tcp协议开始访问你的web服务器，你的web服务器得到请求后，开始提供服务，接收请求，之后通过response返回你的应答给浏览器。</p><p>那么我们来看，我们先假设你的首页中有100张图片，以及一个单表的查询，此时，用户的看似一次http请求，其实并不是一次，用户在第一次访问的时候，浏览器中不会有缓存，你的100张图片，浏览器要连着请求100次http请求（有人会跟我说http长链短链的问题，不在这里讨论），你的web服务器接收这些请求，都需要耗费内存去创建socket来玩tcp传输。</p><p>重点来了，这样的话，你的web服务器的压力会非常大，因为页面中的所有请求都是只请求到你这台服务器上，如果1个人还好，如果10000个人并发访问呢（先不聊web服务器集群，这里就说是单实例web服务器），那你的服务器能扛住多少个tcp链接？你的服务器的内存有多大？你能抗住多少IO？你给web服务器分的内存有多大？会不会宕机？</p><p>这就是为什么，越是大中型的web应用，他们越是要解耦。</p><p>理论上你可以把你的数据库+应用服务+消息队列+缓存+用户上传的文件+日志+等等都扔在一台主机上，但是这样就好像是你把鸡蛋都放在一个篮子里，隐患非常大。</p><p>正常的分布式架构，是都要拆开的，你的应用服务器集群（前，后）+文件服务器集群+数据库服务器集群+消息队列集群+缓存集群等等。</p><p>前戏太长了。</p><p>下面步入正题，首先以后的java web项目都尽量要避免使用jsp，要搞前后台解耦，玩分布式架构，这样我们的应用架构才更强。</p><p>使用jsp的痛点：</p><p>动态资源和静态资源全部耦合在一起，无法做到真正的动静分离。服务器压力大，因为服务器会收到各种http请求，例如css的http请求，js的，图片的，动态代码的等等。一旦服务器出现状况，前后台一起玩完，用户体验极差。</p><p>前端工程师做好html后，需要由java工程师来将html修改成jsp页面，出错率较高（因为页面中经常会出现大量的js代码），修改问题时需要双方协同开发，效率低下。</p><p>jsp必须要在支持java的web服务器里运行（例如tomcat等），无法使用nginx等（nginx据说单实例http并发高达5w，这个优势要用上），性能提不上来。</p><p>第一次请求jsp，必须要在web服务器中编译成servlet，第一次运行会较慢。</p><p>每次请求jsp都是访问servlet再用输出流输出的html页面，效率没有直接使用html高。</p><p>jsp内有较多标签和表达式，前端工程师在修改页面时会捉襟见肘，遇到很多痛点。</p><p>如果jsp中的内容很多，页面响应会很慢，因为是同步加载。</p><p>基于上述的一些痛点，我们应该把整个项目的开发权重往前移，实现前后端真正的解耦！</p><p>以前老的方式是：</p><p>客户端请求</p><p>服务端的servlet或controller接收请求（路由规则由后端制定，整个项目开发的权重大部分在后端）</p><p>调用service,dao代码完成业务逻辑</p><p>返回jsp</p><p>jsp展现一些动态的代码</p><p>新的方式是：</p><p>浏览器发送请求</p><p>直接到达html页面（路由规则由前端制定，整个项目开发的权重前移）</p><p>html页面负责调用服务端接口产生数据（通过ajax等等）</p><p>填充html，展现动态效果。</p><p>（有兴趣的童鞋可以访问一下阿里巴巴等大型网站，然后按一下F12，监控一下你刷新一次页面，他的http是怎么玩的，大多数都是单独请求后台数据，使用json传输数据，而不是一个大而全的http请求把整个页面包括动+静全部返回过来）</p><p>这样做的好处是：</p><p>可以实现真正的前后端解耦，前端服务器使用nginx。前端服务器放的是css，js，图片等等一系列静态资源（甚至你还可以css，js，图片等资源放到特定的文件服务器，例如阿里云的oss，并使用cdn加速），前端服务器负责控制页面引用，跳转，调用后端的接口，后端服务器使用tomcat。（这里需要使用一些前端工程化的框架比如nodejs，react，router，react，redux，webpack）</p><p>发现bug，可以快速定位是谁的问题，不会出现互相踢皮球的现象。页面逻辑，跳转错误，浏览器兼容性问题，脚本错误，页面样式等问题，全部由前端工程师来负责。接口数据出错，数据没有提交成功，应答超时等问题，全部由后端工程师来解决。</p><p>双方互不干扰，前端与后端是相亲相爱的一家人。</p><p>在大并发情况下，我可以同时水平扩展前后端服务器，比如淘宝的一个首页就需要2000台前端服务器做集群来抗住日均多少亿+的日均pv。（去参加阿里的技术峰会，听他们说他们的web容器都是自己写的，就算他单实例抗10万http并发，2000台是2亿http并发，并且他们还可以根据预知洪峰来无限拓展，很恐怖，就一个首页。。。）</p><p>减少后端服务器的并发压力，除了接口以外的其他所有http请求全部转移到前端nginx上。</p><p>即使后端服务暂时超时或者宕机了，前端页面也会正常访问，只不过数据刷不出来而已。</p><p>也许你也需要有微信相关的轻应用，那样你的接口完全可以共用，如果也有app相关的服务，那么只要通过一些代码重构，也可以大量复用接口，提升效率。</p><p>页面显示的东西再多也不怕，因为是异步加载。</p><p>注意：</p><p>在开需求会议的时候，前后端工程师必须全部参加，并且需要制定好接口文档，后端工程师要写好测试用例，不要让前端工程师充当你的组专职测试，推荐使用chrome的插件postman，service层的测试用例拿junit写。</p><p>上述的接口并不是java里的interface，说白了调用接口就是调用你controler里的方法。</p><p>加重了前端团队的工作量，减轻了后端团队的工作量，提高了性能和可扩展性。</p><p>我们需要一些前端的框架来解决类似于页面嵌套，分页，页面跳转控制等功能。（上面提到的那些前端框架）。</p><p>如果你的项目很小，或者是一个单纯的内网项目，那你大可放心，不用任何架构而言，但是如果你的项目是外网项目，呵呵哒。</p><p>以前还有人在使用类似于velocity/freemarker等模板框架来生成静态页面，现在这种做法也被淘汰掉了。</p><p>这篇文章主要的目的是说jsp在大型外网java web项目中被淘汰掉，可没说jsp可以完全不学，对于一些学生朋友来说，jsp/servlet等相关的java web基础还是要掌握牢的，不然你以为springmvc这种框架是基于什么来写的？</p><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div><h1 id="转载自"><a href="#转载自" class="headerlink" title="转载自"></a>转载自</h1><p><a href="https://bbs.csdn.net/topics/392847188" target="_blank" rel="noopener">jsp已经被淘汰了吗？</a></p>]]></content>
      
      
      <categories>
          
          <category> 转发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转发与重定向</title>
      <link href="/2020/09/04/reSend/"/>
      <url>/2020/09/04/reSend/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="转发和重定向区别详解"><a href="#转发和重定向区别详解" class="headerlink" title="转发和重定向区别详解"></a>转发和重定向区别详解</h1><p>​    作为一名java web开发的程序员，在使用servlet/jsp的时候，我们必须要知道实现页面跳转的两种方式的区别和联系：即转发和重定向的区别。</p><p>   1、request.getRequestDispatcher().forward()方法,只能将请求转发给同一个WEB应用中的组件；而response.sendRedirect() 方法不仅可以重定向到当前应用程序中的其他资源，还可以重定向到同一个站点上的其他应用程序中的资源，甚至是使用绝对URL重定向到其他站点的资源。</p><p>如果传递给response.sendRedirect()方法的相对URL以“/”开头，它是相对于整个WEB站点的根目录；如果创建request.getRequestDispatcher()对象时指定的相对URL以“/”开头，它是相对于当前WEB应用程序的根目录。</p><p>   2、重定向访问过程结束后，浏览器地址栏中显示的URL会发生改变，由初始的URL地址变成重定向的目标URL；请求转发过程结束后，浏览器地址栏保持初始的URL地址不变。</p><p>   3、HttpServletResponse.sendRedirect方法对浏览器的请求直接作出响应，响应的结果就是告诉浏览器去重新发出对另外一个URL的访问请求，这个过程好比有个绰号叫“浏览器”的人写信找张三借钱，张三回信说没有钱，让“浏览器”去找李四借，并将李四现在的通信地址告诉给了“浏览器”。于是，“浏览器”又按张三提供通信地址给李四写信借钱，李四收到信后就把钱汇给了“浏览器”。</p><p>由此可见，重定向的时候，“浏览器”一共发出了两封信和收到了两次回复，“浏览器”也知道他借到的钱出自李四之手。</p><p>request.getRequestDispatcher().forward()方法在服务器端内部将请求转发给另外一个资源，浏览器只知道发出了请求并得到了响应结果，并不知道在服务器程序内部发生了转发行为。这个过程好比绰号叫“浏览器”的人写信找张三借钱，张三没有钱，于是张三找李四借了一些钱，甚至还可以加上自己的一些钱，然后再将这些钱汇给了“浏览器”。</p><p>由此可见，转发的时候，“浏览器”只发 出了一封信和收到了一次回复，他只知道从张三那里借到了钱，并不知道有一部分钱出自李四之手。</p><p>​    4、request.getRequestDispatcher().forward()方法的调用者与被调用者之间共享相同的request对象和response对象，它们属于同一个访问请求和响应过程；</p><p>而response.sendRedirect()方法调用者与被调用者使用各自的request对象和response对象，它们属于两个独立的访问请求和响应过程。对于同一个WEB应用程序的内部资源之间的跳转，特别是跳转之前要对请求进行一些前期预处理，并要使用HttpServletRequest.setAttribute方法传递预处理结果，那就应该使用request.getRequestDispatcher().forward()方法。不同WEB应用程序之间的重定向，特别是要重定向到另外一个WEB站点上的资源的情况，都应该使用response.sendRedirect()方法。</p><p>​    5、无论是request.getRequestDispatcher().forward()方法，还是response.sendRedirect()方法，在调用它们之前，都不能有内容已经被实际输出到了客户端。如果缓冲区中已经有了一些内容，这些内容将被从缓冲区中。</p><p>以上五点的论述来源于：<a href="https://blog.csdn.net/xybelieve1990/article/details/49486751" target="_blank" rel="noopener">点击查看原文论述</a></p><h2 id="转发和重定向的图解"><a href="#转发和重定向的图解" class="headerlink" title="转发和重定向的图解"></a>转发和重定向的图解</h2><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/reSend/process.png" alt="img"></p><h2 id="两种跳转获得对象的方式"><a href="#两种跳转获得对象的方式" class="headerlink" title="两种跳转获得对象的方式"></a>两种跳转获得对象的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得转发对象getRequestDispatcher()</span></span><br><span class="line">HttpServletRequest(httpServletRequest).getRequestDispatcher</span><br><span class="line">ServletContext.getRequestDispatcher();</span><br><span class="line"><span class="comment">//获得重定向对象sendRedirect()</span></span><br><span class="line">HttpServletResponse(httpServletResponse).sendRedirect();</span><br></pre></td></tr></table></figure><h2 id="转发和跳转的小结"><a href="#转发和跳转的小结" class="headerlink" title="转发和跳转的小结"></a>转发和跳转的小结</h2><p>   1、转发使用的是getRequestDispatcher()方法;重定向使用的是sendRedirect();</p><p>   2、转发：浏览器URL的地址栏不变。重定向：浏览器URL的地址栏改变；</p><p>   3、转发是服务器行为，重定向是客户端行为；</p><p>   4、转发是浏览器只做了一次访问请求。重定向是浏览器做了至少两次的访问请求；</p><p>   5、转发2次跳转之间传输的信息不会丢失，重定向2次跳转之间传输的信息会丢失（request范围）。</p><h2 id="转发和重定向的选择"><a href="#转发和重定向的选择" class="headerlink" title="转发和重定向的选择"></a>转发和重定向的选择</h2><p>   1、重定向的速度比转发慢，因为浏览器还得发出一个新的请求，如果在使用转发和重定向都无所谓的时候建议使用转发。</p><p>   2、因为转发只能访问当前WEB的应用程序，所以不同WEB应用程序之间的访问，特别是要访问到另外一个WEB站点上的资源的情况，这个时候就只能使用重定向了。</p><h2 id="转发和重定向的应用场景"><a href="#转发和重定向的应用场景" class="headerlink" title="转发和重定向的应用场景"></a>转发和重定向的应用场景</h2><p>​    在上面我已经提到了，转发是要比重定向快，因为重定向需要经过客户端，而转发没有。有时候，采用重定向会更好，若需要重定向到另外一个外部网站，则无法使用转发。另外，重定向还有一个应用场景：避免在用户重新加载页面时两次调用相同的动作。</p><p>​    例如，当提交产品表单的时候，执行保存的方法将会被调用，并执行相应的动作；这在一个真实的应用程序中，很有可能将表单中的所有产品信息加入到数据库中。但是如果在提交表单后，重新加载页面，执行保存的方法就很有可能再次被调用。同样的产品信息就将可能再次被添加，为了避免这种情况，提交表单后，你可以将用户重定向到一个不同的页面，这样的话，这个网页任意重新加载都没有副作用，因为重定向时会清除两次跳转之间的传输信息（request范围）；</p><p>​    但是，使用重定向不太方便的地方是，使用它无法将值轻松地传递给目标页面。而采用转发，则可以简单地将属性添加到Model,使得目标视图可以轻松访问。由于重定向经过客户端，所以Model中的一切都会在重定向时丢失。但幸运的是，在Spring3.1版本以后，我们可以通过Flash属性，解决重定向时传值丢失的问题。</p><p>​    要使用Flash属性，必须在Spring MVC的配置文件中添加一个&lt;annotation-driven/&gt;。然后，还必须再方法上添加一个新的参数类型：org.springframework.web.servlet.mvc.support.RedirectAttributes。</p><p>​    如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"saveProduct"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveProduct</span><span class="params">(ProductForm productForm,RedirectAttributes redirectAttributes)</span></span></span><br><span class="line"><span class="function">     <span class="comment">//执行产品保存的业务逻辑等</span></span></span><br><span class="line"><span class="function">     <span class="comment">//传递参数</span></span></span><br><span class="line"><span class="function">       redirectAttributes.<span class="title">addFlashAttribute</span><span class="params">(<span class="string">"message"</span>,<span class="string">"The product is saved successfully"</span>)</span></span>;</span><br><span class="line">     <span class="comment">//执行重定向</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">"redirect:/……"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div><h1 id="转发自"><a href="#转发自" class="headerlink" title="转发自"></a>转发自</h1><p><a href="https://blog.csdn.net/liubin5620/article/details/79922692" target="_blank" rel="noopener">页面跳转的两种方式(转发和重定向)区别及应用场景分析</a></p>]]></content>
      
      
      <categories>
          
          <category> 转发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> 转发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 简易笔记</title>
      <link href="/2020/09/03/mybatisNote/"/>
      <url>/2020/09/03/mybatisNote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="JDBC-操作缺陷"><a href="#JDBC-操作缺陷" class="headerlink" title="JDBC 操作缺陷"></a>JDBC 操作缺陷</h1><ol><li>开发者需要关注Connecttion、Statement、ResultSet对象创建和销毁；</li><li>对返回结果ResultSet,需要 自己封装为List；</li></ol><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul><li><p>mybatis是 MyBatis SQL Mapper Framework for Java （sql映射框架）</p></li><li><p>1）sql mapper :sql映射</p><pre><code>可以把数据库表中的一行数据  映射为 一个java对象。一行数据可以看做是一个java对象。操作这个对象，就相当于操作表中的数据。</code></pre><p>   2） Data Access Objects（DAOs） : 数据访问 ， 对数据库执行增删改查。</p></li></ul><h2 id="mybatis框架提供了什么"><a href="#mybatis框架提供了什么" class="headerlink" title="mybatis框架提供了什么"></a>mybatis框架提供了什么</h2><ul><li><p>提供了创建\关闭 Connection ,Statement, ResultSet的能力，无需开发者多次操作。</p></li><li><p>提供执行sql语句的能力，无需开发人员手动执行。</p></li><li><p>提供了循环sql， 把sql的结果转为java对象， List集合的能力</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDBC需自己把结果封装为List  </span></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">stu.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">stu.setAge(rs.getInt(<span class="string">"age"</span>));</span><br><span class="line"><span class="comment">//从数据库取出数据转为 Student 对象，封装到 List 集合</span></span><br><span class="line">stuList.add(stu);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="我们要做什么"><a href="#我们要做什么" class="headerlink" title="我们要做什么"></a>我们要做什么</h2><ol><li>提供SQL语句；</li><li>拿到mybatis返回的数据，进行业务逻辑操作。</li></ol><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><ol><li><p>加入依赖 ：a、mybatis框架依赖；b、数据库连接依赖。</p></li><li><p>创建Dao接口：定义操作数据库方法；</p></li><li><p>创建mapper 文件，即sql映射文件：写sql 语句，要与Dao接口中方法对应。</p></li><li><p>创建配置文件</p></li><li><p>使用mybatis的SqlSession对象，执行sql语句。</p><p>注意：如果以后与mybatis插件或者和spring配合使用，就不必这么麻烦，但是这几项文件都必不可少。</p></li></ol><h1 id="Mybatis-的配置文件"><a href="#Mybatis-的配置文件" class="headerlink" title="Mybatis 的配置文件"></a>Mybatis 的配置文件</h1><h2 id="直接加载-xml文件作为数据库驱动"><a href="#直接加载-xml文件作为数据库驱动" class="headerlink" title="直接加载.xml文件作为数据库驱动"></a>直接加载.xml文件作为数据库驱动</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/db1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="xml配置文件从properties加载数据库驱动"><a href="#xml配置文件从properties加载数据库驱动" class="headerlink" title=".xml配置文件从properties加载数据库驱动"></a>.xml配置文件从properties加载数据库驱动</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入properties 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置信息，通过 '$&#123;&#125;' 语法从.properties 文件中加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--environments，配置数据库环境信息,可通过envirment配置多个环境--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--default，通过此属性切换运行环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用JDBC作为管理Connection对象的事务处理，如：commit,rollback。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--数据源类型，POOLED，表示使用连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  数据库连接信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--配置多个环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"pro"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用JDBC作为管理Connection对象的事务处理，如：commit,rollback。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--数据源类型，POOLED，表示使用连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  数据库连接信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--mapper 标签指定sql映射文件的位置（从类路径开始）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!---这个映射文件文职，相当于告诉接口，持久层实现类在什么位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/didiqi/Dao/Student.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="增添日志"><a href="#增添日志" class="headerlink" title="增添日志"></a>增添日志</h3><ul><li>方便调试</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在控制台打印日志信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><h2 id="约束文件"><a href="#约束文件" class="headerlink" title="约束文件"></a>约束文件</h2><ul><li>限制，检查当前文件中出现的标签、属性是否符合mybatis要求</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><ul><li>所有的标签都必须写ID，可以随意定义。但要求写Dao接口中的<strong>方法名称</strong>。</li></ul><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dbsy.student.mapper.AdminMapper"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--mapper:当前文件根标签，必须存在。--&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>namespace</td><td>唯一值，命名空间。通过namespace 区分不同的mapper映射文件。要求使用Dao接口的全限定名称。</td></tr></tbody></table><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><ul><li>插入</li></ul><p>&lt;insert&gt;在标签中写insert开头的sql语句 处理添加操作    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"org.didiqi.domain.User"</span>&gt;</span></span><br><span class="line">    insert into user(username, address, sex, birthday) values (#&#123;username&#125;, #&#123;address&#125;, #&#123;sex&#125;, #&#123;birthday&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>&lt;update&gt;在标签中写update开头的sql语句 处理修改操作   </p><ul><li>更新</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"org.didiqi.domain.User"</span>&gt;</span></span><br><span class="line">    update user set username = #&#123;username&#125;, address = #&#123;address&#125;, sex = #&#123;sex&#125;, birthday = #&#123;birthday&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><ul><li>删除</li></ul><p>&lt;delete&gt;在标签中写delete开头的sql语句 处理删除操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><ul><li>查询</li></ul><p>&lt;select&gt;在标签中写select开头的sql语句 处理查询操作</p><h4 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"org.didiqi.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"org.didiqi.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id like #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="聚合（获取总记录数）"><a href="#聚合（获取总记录数）" class="headerlink" title="聚合（获取总记录数）"></a>聚合（获取总记录数）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTotal"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select count(*) from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li>select 标签中 parameterType属性可以忽略。</li><li>select 标签中 resultType属性必须写。</li><li>insert\update\delete 三个标签只写ID属性，其他可以一律省略。</li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li><p>JDBC中向PrepareStatement对占位符的位置设置参数时，非常繁琐。   </p><p>解决：MyBatis自动将java队形映射至sql语句中，通过statement中的parameterType定义输入参数的类型。</p></li><li><p>JDBC中解析结果集时需要把字段的值设置到相应的实体类属性名中。    </p></li></ol><p>解决：MyBatis自动将sql执行结果映射到java对象，通过statement中的resultType定义输出结果的类型。</p><h3 id="公共属性"><a href="#公共属性" class="headerlink" title="公共属性"></a>公共属性</h3><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>parameterType</td><td>为sql语句传递的参数的类型</td></tr><tr><td>resultType</td><td>表示结果类型。要求使用类的全限定名称。说明：sql语句执行后，由mybatis 自动将ResultSet的每条记录，转变成java对象。JDBC需要手动遍历将ResultSet的每条记录中每个值，设置给每个属性。</td></tr></tbody></table><p>例：</p><ul><li>JDBC</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//JDBC需自己把结果封装为List  </span></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">stu.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">stu.setAge(rs.getInt(<span class="string">"age"</span>));</span><br><span class="line"><span class="comment">//从数据库取出数据转为 Student 对象，封装到 List 集合</span></span><br><span class="line">stuList.add(stu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mybatis</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>= <span class="string">"studentDao"</span> <span class="attr">resultType</span>=<span class="string">"org.didiqi.domain.Student"</span>&gt;</span></span><br><span class="line">    select id,name,age from student  order by id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><ul><li>使用sqlSession..getMapper(dao.class) 获取对象接口</li><li>使用getMapper，JDK动态代理方法，可以通过类接口，的全限定名与mapper文件（mapper文件中的命名空间）做映射。</li></ul><h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h1><ul><li>从java 代码中将数据传入到mapper文件的sql语句中。</li></ul><h2 id="parameterType-amp-resultType"><a href="#parameterType-amp-resultType" class="headerlink" title="parameterType &amp;resultType"></a>parameterType &amp;resultType</h2><ul><li>mapper文件中的属性，表示dao接口中方法的传入参数的数据类型和方法返回值类型。</li></ul><p>例：UserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserDao <span class="title">selectUserById</span><span class="params">(Integer id)</span></span></span><br><span class="line"><span class="function"><span class="comment">//此时接口中的参数id 为Interger类型。所以需要在mapper文件中对应语句的parameterType属性说明。</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回值类型为 UserDao 所以要设置resultType</span></span></span><br><span class="line"><span class="function"><span class="comment">//select标签中做的 id 对应Dao 接口中的方法名</span></span></span><br><span class="line"><span class="function">&lt;select id</span>=<span class="string">"selectUserById"</span> parameterType=<span class="string">"全限名，如java.lang.Integer"</span> resultType=<span class="string">"全限定名"</span> &gt;</span><br><span class="line">    select id, name,age from student where id=#&#123;id&#125;</span><br><span class="line">&lt;select&gt;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// #&#123;任意字符&#125;就是一个占位符，当拿到传入数据后，根据数据类型将其放入对应位置。</span></span><br></pre></td></tr></table></figure><h2 id="amp"><a href="#amp" class="headerlink" title="# &amp; $"></a># &amp; $</h2><h3 id=""><a href="#" class="headerlink" title="#"></a>#</h3><ul><li>#占位符。告诉mybatis，需要使用真实参数代替。<ul><li>这里使用PrepareStatement 对象，替换sql语句中的 ‘ ？’</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapper:</span></span><br><span class="line">&lt;select id=<span class="string">"selectUserById"</span> parameterType=<span class="string">"全限名"</span> resultType=<span class="string">"全限定名"</span> &gt;</span><br><span class="line">    select id, name,age from student where id=#&#123;id&#125;</span><br><span class="line">&lt;select&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mybatis执行：</span></span><br><span class="line">  String sql=<span class="string">"select id, name,age from student where id=?"</span>;</span><br><span class="line">  PreParedStatement ps=conn.prepareStatement(sql);</span><br><span class="line">  ps.setInt(<span class="number">1</span>,<span class="number">101</span>)</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title="$"></a>$</h3><ul><li>字符串替换，告诉mybatis 使用$包含的字符串采用<strong>替换</strong>和<strong>字符串连接</strong>方式</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--#号 ，通过?占位符，然后利用PreParedStatement去执行--&gt;</span> </span><br><span class="line">select id,name, email,age from student where id=? </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--$号 ，不适用占位符，使用字符串连接方式，利用Statement对象执行--&gt;</span></span><br><span class="line"> String sql="select id,name, email,age from student where id=" + "1001";</span><br></pre></td></tr></table></figure><h4 id="替换列名"><a href="#替换列名" class="headerlink" title="替换列名"></a>替换列名</h4><ul><li>因为$符号具有替换和连接的作用，所以可以使用器替换列名</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mapper--&gt;</span></span><br><span class="line">select * from student order by $&#123;parameName&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mybatis执行过程--&gt;</span></span><br><span class="line">"select *  from student order by " + "列名";</span><br></pre></td></tr></table></figure><h2 id="单个简单数据类型【常用】"><a href="#单个简单数据类型【常用】" class="headerlink" title="单个简单数据类型【常用】"></a>单个简单数据类型【常用】</h2><ul><li>简单类型：mybatis 把java的基本数据类型与String类型</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student  <span class="title">selectStudentById</span><span class="params">(Integer id)</span> </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="comment">//mapper文件获取简单类型的一个参数的值，使用 #&#123;任意字符&#125;</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">//mapper:   </span></span></span><br><span class="line">select id,name, email,age from student where id=#&#123;test&#125;</span><br></pre></td></tr></table></figure><h2 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h2><h3 id="使用-Param命名参数【常用】"><a href="#使用-Param命名参数【常用】" class="headerlink" title="使用@Param命名参数【常用】"></a>使用@Param命名参数【常用】</h3><ul><li>@Param(“参数名”)</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">selectMulitParam</span><span class="params">(@Param(<span class="string">"myname"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"myage"</span>)</span> Integer age)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//使用  @Param("参数名")  String name  将参数name 命名为@Param("参数名")</span></span></span><br><span class="line"><span class="function"><span class="comment">//mapper通过新命名的参数名去#&#123;xxx&#125;中字符来匹配</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">//mapper:</span></span></span><br><span class="line">select * from student where name=#&#123;myname&#125; or age=#&#123;myage&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Java对象【常用】"><a href="#使用Java对象【常用】" class="headerlink" title="使用Java对象【常用】"></a>使用Java对象【常用】</h3><ul><li><p>使用java对象的属性值，作为参数实际值；</p></li><li><p>常用#{属性名}语法，完整语法#{属性名，javaType=类型名称，jdbcType=数据类型} –很少用；</p><ul><li>javaType：java中的数据类型；</li><li>jdbcType：数据库中的数据类型（数据库文档中有说明）。</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">selectMulitParam</span><span class="params">(Student student)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">//java.pojo:</span></span></span><br><span class="line"><span class="function">class Student</span>&#123;</span><br><span class="line">    String stuname;</span><br><span class="line">    Integer stuage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//#&#123;属性名&#125;，这里的属性名==java对象中的属性名（它先 new 对象，再通过setter将属性注入的）</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//mapper:</span></span><br><span class="line"> select * from student where name=#&#123;stuname&#125; or age=#&#123;stuage&#125;</span><br></pre></td></tr></table></figure><h3 id="按参数位置"><a href="#按参数位置" class="headerlink" title="按参数位置"></a>按参数位置</h3><ul><li>参数位置从0开始，语法#{arg位置}<ul><li>例：第一个参数#{arg0}，第二个参数#{arg1}</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">selectMulitParam</span><span class="params">(String name,Integer age,String sex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper:</span></span><br><span class="line">select * from student where name=#&#123;arg0&#125; or sex=#&#123;arg2&#125; or age=#&#123;arg1&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Map"><a href="#使用Map" class="headerlink" title="使用Map"></a>使用Map</h3><ul><li>#{key}，通过key 获取Map中对应的value值</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">selectMulitParam</span><span class="params">(String name,Integer age,String sex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.Map</span></span><br><span class="line">Map&lt;String,Object&gt; map= <span class="keyword">new</span> HashMap&lt;String ,Object&gt;;</span><br><span class="line">map.put(<span class="string">"myname"</span>,<span class="string">"小明"</span>)</span><br><span class="line">map.put(<span class="string">"myage"</span>,<span class="number">20</span>)</span><br><span class="line">map.put(<span class="string">"mysex"</span>,<span class="string">"男"</span>)</span><br><span class="line"><span class="comment">//mapper:</span></span><br><span class="line">select * from student where name=#&#123;myname&#125; or sex=#&#123;mysex&#125; or age=#&#123;myage&#125;</span><br></pre></td></tr></table></figure><h1 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h1><ul><li><p>mybatis 执行完sql语句，得到的是java对象</p></li><li><p>resultType结果类型， 指sql语句执行完毕后， 数据转为的java对象， java类型是任意的。  resultType结果类型的它值 1. 类型的全限定名称   2. 类型的别名， 例如 java.lang.Integer别名是int（mybatis官方文档可查，一般都是改为全小写）。</p></li></ul><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><ol><li>mybatis执行sql语句， 然后mybatis调用类的无参数构造方法，创建对象。</li><li>mybatis把ResultSet指定<strong>列值</strong>赋给<strong>同名的属性</strong>。<ul><li>如果无同名属性则不赋值</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.didiqi.domain.Student</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String  name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//stter &amp; getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!----&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectMultiPosition"</span> <span class="attr">resultType</span>=<span class="string">"org.didiqi.domain.Student"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据列名==Student属性名 赋值---&gt;</span></span><br><span class="line">    select id,name, email,age from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis 处理方式和JDBC相似，只是mybatis将复制过程封装隐藏了。</span><br></pre></td></tr></table></figure><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ResultSet rs = executeQuery(<span class="string">" select id,name, email,age from student"</span> )</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    </span><br><span class="line">        Student  student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">        student.setName(rs.getString(<span class="string">"name"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回值列名≠对象属性名"><a href="#返回值列名≠对象属性名" class="headerlink" title="返回值列名≠对象属性名"></a>返回值列名≠对象属性名</h2><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><ul><li>类名与java 属性的关系</li><li>当你的列名和属性名不一样时，一定使用resultMap</li><li>注意：resultType 与resultMap不要一起用，二选一</li></ul><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.didiqi.domain.Student</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String  myname;</span><br><span class="line">    <span class="keyword">private</span> String myemail;</span><br><span class="line">    <span class="keyword">private</span> Integer myage;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//stter &amp; getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectMultiPosition"</span> <span class="attr">resultMap</span>=<span class="string">"studentMap"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此时列名与返回对象的属性值名称不同--&gt;</span></span><br><span class="line">    select id,name, email,age from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMapid="studentMap"</span> <span class="attr">type</span>=<span class="string">"要指定的对象的全限定名，org.didiqi.domain.Student"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--主键列，用id标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"列名"</span>  <span class="attr">property</span>=<span class="string">"属性名"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span>  <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非主键列，用result标签--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"列名"</span>  <span class="attr">property</span>=<span class="string">"属性名"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span>  <span class="attr">property</span>=<span class="string">"myname"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h3><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.didiqi.domain.Student</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer myid;</span><br><span class="line">    <span class="keyword">private</span> String  myname;</span><br><span class="line">    <span class="keyword">private</span> String myemail;</span><br><span class="line">    <span class="keyword">private</span> Integer myage;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//stter &amp; getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectMultiPosition"</span> <span class="attr">resultType</span>=<span class="string">"org.didiqi.domain.Student"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此时列名与返回对象的属性值名称不同--&gt;</span></span><br><span class="line">    select id as myid ,name as myname, email as myemail,age as myage from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="模糊查询like"><a href="#模糊查询like" class="headerlink" title="模糊查询like"></a>模糊查询like</h1><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>%</td><td>替代一个或多个字符</td></tr><tr><td>_</td><td>仅替代一个字符</td></tr><tr><td>[charlist]</td><td>字符列中的任何单一字符</td></tr><tr><td>[^charlist] or [!charlist]</td><td>不在字符列中的任何单一字符</td></tr></tbody></table><h2 id="java代码中指定like内容"><a href="#java代码中指定like内容" class="headerlink" title="java代码中指定like内容"></a>java代码中指定like内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java代码准备好内容</span></span><br><span class="line">String name=<span class="string">"%李%"</span>；</span><br><span class="line">    </span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectLikeOne</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"> <span class="comment">//mapper:   </span></span></span><br><span class="line"><span class="function">select * from student where  name like #</span>&#123;name&#125;</span><br></pre></td></tr></table></figure><h2 id="mapper文件中拼接"><a href="#mapper文件中拼接" class="headerlink" title="mapper文件中拼接"></a>mapper文件中拼接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectLikeOne</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"> <span class="comment">//mapper中拼接:   </span></span></span><br><span class="line"><span class="function">select * from student where  name like "%" #</span>&#123;name&#125; <span class="string">"%"</span></span><br></pre></td></tr></table></figure><h1 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h1><ul><li>sql的内容是变化的，可以根据条件获取到不同的sql语句。主要是where部分发生变化。</li></ul><h2 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;if test&#x3D;&quot;判断java对象的属性值,属性&#x3D;&#x3D;xxx值&quot;&gt;</span><br><span class="line">    部分sql语句</span><br><span class="line">&lt;&#x2F;if&gt;</span><br></pre></td></tr></table></figure><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">select * from student </span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name !=null and name != ''"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果上面的条件成立，则将该语句添加到 where 后---&gt;</span></span><br><span class="line">        name= #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    &lt;if test age&lt;10&gt;</span><br><span class="line">    <span class="comment">&lt;!--如果上面的条件成立，则将该语句添加到 where 后---&gt;</span></span><br><span class="line">    and age=#&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的例子中有一个问题如果 name==null 则，第一个语句不存在而第二语句成立 则sql语句会变为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where and age&#x3D;?</span><br></pre></td></tr></table></figure><p>这显然是错误的语法所以可以在where 后面添加,放能防止出现此类错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where 1&#x3D;1</span><br></pre></td></tr></table></figure><p>此外还有where标签来解决此种错误</p><h2 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h2><ul><li>用来包含 多个&lt;if&gt;的， 当多个if有一个成立的， &lt;where&gt;会自动增加一个where关键字，并去掉 if中多余的 and ，or等。(不用在添加hwhere 1=1 了)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">select * from student </span><br><span class="line">    <span class="comment">&lt;!--使用where标签就不用担心 and 等字符导致的语法错误问题了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name !=null and name != ''"</span>&gt;</span></span><br><span class="line">            name= #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;if test age&lt;10&gt;</span><br><span class="line">            and age=#&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h2><ul><li>循环java中的数组，list集合的。 主要用在sql的in语句中。</li></ul><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">""</span> <span class="attr">item</span>=<span class="string">""</span> <span class="attr">open</span>=<span class="string">""</span> <span class="attr">close</span>=<span class="string">""</span> <span class="attr">separator</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    #&#123;xxx&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>collection</td><td>表示接口中的方法参数的类型， 如果是数组使用array , 如果是list集合使用list</td></tr><tr><td>item</td><td>自定义的，表示数组和集合成员的变量</td></tr><tr><td>open</td><td>循环开始是的字符</td></tr><tr><td>close</td><td>循环结束时的字符</td></tr><tr><td>separator</td><td>集合成员之间的分隔符</td></tr></tbody></table><h3 id="例-1"><a href="#例-1" class="headerlink" title="例"></a>例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--最终的sql语句--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--sql="select * from student where id in(1,2,3,4)"--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mybatis处理格式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个占位符的个数根据传入参数mybatis自己处理的--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--sql="select * from student where id in(？,？,？,？)"--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第一种写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select...</span>&gt;</span></span><br><span class="line">select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">ids</span> !=<span class="string">null</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--实际上就是做一个字符串的拼接--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"myid"</span> <span class="attr">open</span>=<span class="string">"id in ("</span> <span class="attr">close</span>=<span class="string">")"</span>  <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">                #&#123;myid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二种写法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--不同的字符拼接方式，当然理论上，只要利用open与close可以组合成无限多种写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select...</span>&gt;</span></span><br><span class="line">select * from student id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">ids</span> !=<span class="string">null</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--实际上就是做一个字符串的拼接--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"myid"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>  <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">                #&#123;myid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--如果传入的值是对象--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select...</span>&gt;</span></span><br><span class="line">select * from student id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">ids</span> !=<span class="string">null</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--实际上就是做一个字符串的拼接--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"stu"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>  <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mybatis 会自动调用对象的get方法，获取对相应属性--&gt;</span></span><br><span class="line">                #&#123;stu.myid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note danger">            <p>🚥🍀  ~ · · · <strong>未完，更新ING</strong> · · · ~</p>          </div><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架之动态代理&amp;AOP</title>
      <link href="/2020/08/17/SpringOfAOP/"/>
      <url>/2020/08/17/SpringOfAOP/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP 面向切面编程"></a>AOP 面向切面编程</h1><ul><li>Aspect Oriented Programming</li></ul><p>通过预编译方式和运行期动态代理实现程序功能的统一维护技术。</p><p>动态代理技术：</p><ul><li>JDK代理：基于接口的动态代理技术【必须有接口，否则无法生成代理对象】</li><li>cglib代理：基于父类的动态代理技术</li></ul><h2 id="先说静态代理"><a href="#先说静态代理" class="headerlink" title="先说静态代理"></a>先说静态代理</h2><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Spring/AOP/image-20200816182800929.png" alt=""></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公共接口类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wall</span><span class="params">(<span class="keyword">int</span> length)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//真实对象实现类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class PersonImpl implements <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wall</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"我走了"</span>+length +<span class="string">"KM"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class PersonProxy implements <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//包含真实对象</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonProxy</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person=person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增强真实对象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wall</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        doBefore(); <span class="comment">//前置增强</span></span><br><span class="line">        person.wall(size);</span><br><span class="line">        doAfter();<span class="comment">//后置增强</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增强方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">( )</span></span>&#123;</span><br><span class="line">        <span class="comment">//...//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">( )</span></span>&#123;</span><br><span class="line">        <span class="comment">//...//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建，获取真实对象</span></span><br><span class="line">    Person person=<span class="keyword">new</span> PersonImpl();</span><br><span class="line">    <span class="comment">//传入真实对象，获取代理对象，实现方法增强</span></span><br><span class="line">    PersonProxy personProxy=<span class="keyword">new</span> PersonProxy(person);</span><br><span class="line">    <span class="comment">//调用增强方法</span></span><br><span class="line">    personProxy.wall(<span class="number">10</span>);   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//result:</span></span><br><span class="line"><span class="comment">//doBefore_output</span></span><br><span class="line"><span class="comment">//我走了10KM</span></span><br><span class="line"><span class="comment">//doAfter_output</span></span><br></pre></td></tr></table></figure><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Spring/AOP/image-20200816184454036.png" alt=""></p><p>如果使用静态代理的方法，实现复杂功能，会破坏源码，难以维护，即违反开闭原则。</p><h2 id="再说动态代理"><a href="#再说动态代理" class="headerlink" title="再说动态代理"></a>再说动态代理</h2><h3 id="JDK—动态代理"><a href="#JDK—动态代理" class="headerlink" title="JDK—动态代理"></a>JDK—动态代理</h3><ul><li><p>java-lang-reflect包中</p></li><li><p>proxy.newProxyInstance ==获取动态代理对象</p></li><li><p>InvocationHandler.invoke ==具体实现方法</p></li></ul><h4 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h4><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Spring/AOP/image-20200816235137441.png" alt=""></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口A</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyCalculatorA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyCalculatorB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口实现类A</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculatorAImpl</span> <span class="keyword">implements</span> <span class="title">MyCalculatorA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口实现类B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculatorBImpl</span> <span class="keyword">implements</span> <span class="title">MyCalculatorB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyManager</span> <span class="keyword">implements</span>  <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="comment">//真实实体类</span></span><br><span class="line">    <span class="comment">//这里使用Object ，因为是动态代理，传入的类的类型未知，所以采用Object</span></span><br><span class="line">    <span class="keyword">private</span> Object subject;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*public CalculatorProxy(Object subject)&#123;</span></span><br><span class="line"><span class="comment">        this.subject=subject;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//这里采用setter和getter方法，方便管理代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSubject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubject</span><span class="params">(Object subject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject=subject;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取Proxy动态代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// newProxyInstance 方法需要传入三个参数：</span></span><br><span class="line">        <span class="comment">//1、 被代理的对象的类,类加载器</span></span><br><span class="line">        <span class="comment">//2、 被代理对象的接口，接口继承</span></span><br><span class="line">        <span class="comment">//3、 代理类，找到invoke方法</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(subject.getClass().getClassLoader(),</span><br><span class="line">                                     subject.getClass().getInterfaces(),</span><br><span class="line">                                     <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增强方法具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        </span><br><span class="line">          doBefore();</span><br><span class="line">        <span class="comment">//method 利用反射 ，调用真实对象</span></span><br><span class="line">            Object invoke=method.invoke(subject,args);</span><br><span class="line">          doAfter(); </span><br><span class="line">            <span class="keyword">return</span> invoke;</span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取真实对象</span></span><br><span class="line">    <span class="comment">//需要实现几个对象加强，就创建几个</span></span><br><span class="line">    MyCalculatorAImpl myCalculatorA=<span class="keyword">new</span> MyCalculatorAImpl();</span><br><span class="line">    MyCalculatorBImpl myCalculatorB = <span class="keyword">new</span> MyCalculatorBImpl();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建代理类</span></span><br><span class="line">    ProxyManager proxyManager = <span class="keyword">new</span> ProxyManager();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置代理类，生成代理对象的类型，并通过此参数，继承抽象接口。</span></span><br><span class="line">    proxyManager.setSubject(myCalculatorA);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取代理类</span></span><br><span class="line">    MyCalculatorA proxyInstanceA = (myCalculatorA) proxyManager.getProxyInstance();</span><br><span class="line">    <span class="comment">//具体方法调用</span></span><br><span class="line">    System.out.println(<span class="string">"One calculator"</span>);</span><br><span class="line">    System.out.println(proxyInstanceA.add(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为其他对象做动态代理</span></span><br><span class="line">    proxyManager.setSubject(myCalculatorB);</span><br><span class="line">    MyCalculatorB proxyInstanceB = (MyCalculatorB) proxyManager.getProxyInstance();</span><br><span class="line">    System.out.println(<span class="string">"Two Calculator"</span>);</span><br><span class="line">    System.out.println(proxyInstanceB.sum(<span class="number">4</span>, <span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//result:</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">One calculator</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">Two Calculator</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><div class="note danger">            <p>🚥🍀  ~ · · · <strong>未完，更新ING</strong> · · · ~</p>          </div><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架之IoC&amp;DI</title>
      <link href="/2020/08/14/springOfIoC/"/>
      <url>/2020/08/14/springOfIoC/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="WEB开发结构框架"><a href="#WEB开发结构框架" class="headerlink" title="WEB开发结构框架"></a>WEB开发结构框架</h1><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Spring/IOC%26DI/image-20200810132126608.png" alt=""></p><ul><li><p><strong>表现层</strong>常用技术，如SpringMVC。</p></li><li><p><strong>业务层</strong>常用技术，如Spring。</p></li><li><p><strong>持久层</strong>常用的技术，如Mybatics。</p></li></ul><p>这三种开发技术就是我们常用的<strong>SSM</strong>开发框架。</p><h2 id="Spring-架构"><a href="#Spring-架构" class="headerlink" title="Spring 架构"></a>Spring 架构</h2><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Spring/IOC%26DI/timg.jpg" alt=""></p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="Spring特点"><a href="#Spring特点" class="headerlink" title="Spring特点"></a>Spring特点</h2><h3 id="IoC-控制反转-–-gt-解耦合"><a href="#IoC-控制反转-–-gt-解耦合" class="headerlink" title="IoC 控制反转 –&gt; 解耦合"></a>IoC 控制反转 –&gt; 解耦合</h3><ul><li>Inverse Of Control</li></ul><p>​    业务层类要使用持久层类中方法时，传统方法：使用new 创建类的对象。IoC实现对象创建，无需每次手动new对象，将对象创建交给Spring，spring通过<strong>配置文件</strong>（.xml）方式创建对象。这样所有的对象交给Spring统一管理，而开发者只需在Spring的容器中，随用随取。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Spring/IOC%26DI/image-20200810144404957.png" alt=""></p><p>Spring的这种思想贯穿整个JavaEE开发：</p><p>在每一层提供解决技术</p><ul><li><p>web层：springMVC</p></li><li><p>service层: spring ioc</p></li><li><p>dao层：spring jdbcTemplate</p></li></ul><h3 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP 面向切面编程"></a>AOP 面向切面编程</h3><ul><li>Aspect Oriented Programming</li></ul><p>通过预编译方式和运行期动态代理实现程序功能的统一维护技术。</p><p>动态代理技术：</p><ul><li>JDK代理：基于接口的动态代理技术【必须有接口，否则无法生成代理对象】</li><li>cglib代理：基于父类的动态代理技术</li></ul><h1 id="开发实例"><a href="#开发实例" class="headerlink" title="开发实例"></a>开发实例</h1><p>步骤：</p><h2 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h2><ul><li>使用Spring框架，就要导入相关jar包，包括四个核心。</li></ul><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Spring/IOC%26DI/image-20200810145023560.png" alt=""></p><ul><li>Beans ：spring配置文件相关配置</li><li>Core：核心部分</li><li>context：spring注解</li><li>SpEL：spring表达式</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过pom.XML文件的形式导入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、编写Dao接口和实现类"><a href="#2、编写Dao接口和实现类" class="headerlink" title="2、编写Dao接口和实现类"></a>2、编写Dao接口和实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserDao接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserDao的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、创建Spring核心文件（配置文件）"><a href="#3、创建Spring核心文件（配置文件）" class="headerlink" title="3、创建Spring核心文件（配置文件）"></a>3、创建Spring核心文件（配置文件）</h2><ul><li>在resource文件夹下创建配置文件–applicationContext.xml（约定的默认文件名）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>                <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans                       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、在Spring配置文件中配置UserDaoImp"><a href="#4、在Spring配置文件中配置UserDaoImp" class="headerlink" title="4、在Spring配置文件中配置UserDaoImp"></a>4、在Spring配置文件中配置UserDaoImp</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>                xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans                       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id="userDao" class="com.didiqi.dao.impl.userDaoImpl"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ul><li>说明：</li></ul><p>并不是只有实现类才要IoC，只要符合解耦合的条件，其他对象都可以。</p><h3 id="配置文件分模块"><a href="#配置文件分模块" class="headerlink" title="配置文件分模块"></a>配置文件分模块</h3><p>实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--写在spring主配置文件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-xxx.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean标签简介"><a href="#Bean标签简介" class="headerlink" title="Bean标签简介"></a>Bean标签简介</h2><ul><li>用于表明所配置的对象交由Spring 来创建实例化。</li><li>默认情况下它调用的是类中的无参构造函数，如果使用上面的bean配置，若没有无参构造函数则不能实例化成功。</li></ul><h3 id="bean的实例化三种方式："><a href="#bean的实例化三种方式：" class="headerlink" title="bean的实例化三种方式："></a>bean的实例化三种方式：</h3><ul><li>bean配置形式决定了哪种实例化方式</li></ul><ol><li><p>使用无参构造方法实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认，也是最常用的配置方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.didiqi.dao.impl.userDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>工厂静态方法实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--不常用的配置方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--需要自己添加一个单独的实例化类，并用static方法new，这样产生实例化对象，然后返回--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.didiqi.factory.StaticFactoryBean"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"createUserDao"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--此时--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--class==静态实例化类方法的全限定名称（即路径）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--factory-method==具体实现静态实例化类中的方法的名称（即路径）--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己实现实例化方法，并返回实例化对象，当spring在需要的时候调用并创建。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactoryBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">createUserDao</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>工厂实例方法实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用工厂类的非静态方法返回实例化对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--首先将工厂类放入bean，即现有工厂对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factoryBean"</span> <span class="attr">class</span>=<span class="string">"com.didiqi.factory.DynamicFactoryBean"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--再通过工厂对象调用，实例化方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">factory-bean</span>=<span class="string">"factoryBean"</span> <span class="attr">factory-method</span>=<span class="string">"createUserDao"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFactoryBean</span> </span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDao <span class="title">createUserDao</span><span class="params">()</span></span>&#123;        </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="基本属性："><a href="#基本属性：" class="headerlink" title="基本属性："></a>基本属性：</h3><ul><li><p>id：Bean实例在Spring容器中的唯一标识</p></li><li><p>class：Bean的全限定名称</p></li></ul><h4 id="Bean标签之Scope"><a href="#Bean标签之Scope" class="headerlink" title="Bean标签之Scope"></a>Bean标签之Scope</h4><ul><li>scope:指对象的作用范围</li></ul><table><thead><tr><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td>singleton</td><td>默认值，单例的</td></tr><tr><td>prototype</td><td>多例的</td></tr><tr><td>request</td><td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   request   域中</td></tr><tr><td>session</td><td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   session   域中</td></tr><tr><td>global   session</td><td>WEB   项目中，应用在   Portlet   环境，如果没有   Portlet   环境那么globalSession   相当于   session</td></tr></tbody></table><h5 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h5><p>Bean的实例化个数：1个</p><p>Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p><p>Bean的生命周期：</p><p>​    对象创建：当应用加载[applicationcontext.xml文件被加载]，创建容器时，对象就被创建了</p><p>​    对象运行：只要容器在，对象一直活着</p><p>​    对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p><h5 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h5><p>Bean的实例化个数：多个</p><p>Bean的实例化时机：当调用getBean()方法时实例化Bean</p><p>Bean的生命周期：</p><p>​    对象创建：当使用对象时，创建新的对象实例</p><p>​    对象运行：只要对象在使用中，就一直活着</p><p>​    对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</p><h4 id="Bean标签之生命周期"><a href="#Bean标签之生命周期" class="headerlink" title="Bean标签之生命周期"></a>Bean标签之生命周期</h4><ul><li><p>init-method：指定类中的初始化方法名称，每次实例化对象时调用，有点像构造函数。</p></li><li><p>destroy-method：指定类中销毁方法名称，结束前调用，有点像C++中的<strong>析构函数</strong>。</p></li></ul><p>说明：</p><p> 这里的初始化方法和销毁方法，都要自己创建方法。Spring只负责根据方法名，在合适时机调用。</p><p>疑问：</p><p>init-method标签是否与类中的构造函数功能重复呢？</p><h2 id="5、使用Spring的API获得Bean实例。"><a href="#5、使用Spring的API获得Bean实例。" class="headerlink" title="5、使用Spring的API获得Bean实例。"></a>5、使用Spring的API获得Bean实例。</h2><p>通过getBean()方法，获取类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span>  </span><br><span class="line">             ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">             UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);    userDao.save();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>为什么new ClassPathXmlApplicationContext（）而使用ApplicationContext来承接返回对象？</p><p>因为：ClassPathXmlApplicationContext是ApplicationContext接口的实现。同样我们也可以使用ClassPathXmlApplicationContext类来承接返回对象。</p><h3 id="ApplicationContext-常用实现类"><a href="#ApplicationContext-常用实现类" class="headerlink" title="ApplicationContext 常用实现类"></a>ApplicationContext 常用实现类</h3><table><thead><tr><th>ApplicationContext常用实现类</th><th>作用</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>从类的根路径即resourse下加载配置文件 。<strong>推荐使用</strong></td></tr><tr><td>FileSystemXmlApplicationContext</td><td>从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</td></tr><tr><td>AnnotationConfigApplicationContext</td><td>使用注解配置容器对象时，需要使用此类来创建 spring 容器。</td></tr><tr><td>AnnotationConfigWebApplicationContext</td><td>专门为web应用准备的，适用于注解方式。</td></tr><tr><td>XmlWebApplicationContext</td><td>专门为web应用准备的，适用于xml方式。</td></tr></tbody></table><h3 id="ApplicationContext-amp-BeanFactory"><a href="#ApplicationContext-amp-BeanFactory" class="headerlink" title="ApplicationContext &amp; BeanFactory"></a>ApplicationContext &amp; BeanFactory</h3><p>BeanFactory和ApplicationContext是Spring的两大核心接口。而其中ApplicationContext是BeanFactory的子接口。就是继承了BeanFactory 而来的ApplicationContext(应用上下文)，它能提供更多应用服务。</p><p>这两个容器：</p><ul><li>BeanFactory：实现了容器的基本功能；</li><li>ApplicationContext：在BeanFactory的基础上增添了功能，是容器的高级形式</li></ul><h5 id="BeanFactory与ApplicationContext关系图："><a href="#BeanFactory与ApplicationContext关系图：" class="headerlink" title="BeanFactory与ApplicationContext关系图："></a>BeanFactory与ApplicationContext关系图：</h5><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Spring/IOC%26DI/applicationContext.png" alt=""></p><ul><li><p>Environment（环境）</p></li><li><p>MessageSource（国际化）</p></li><li><p>ResourceLoader（资源)</p></li><li><p>ApplicationEventPublisher（应用事件）</p></li><li><p>AbstractApplicationContext，基础抽象类。常用的ClassPathXmlApplicationContext、AnnotationConfigServlet、WebServerApplicationContext等都继承自它。</p></li></ul><h5 id="BeanFactory接口详情"><a href="#BeanFactory接口详情" class="headerlink" title="BeanFactory接口详情"></a>BeanFactory接口详情</h5><p>这里不详细介绍每个类，只是提供一个结构关系梳理。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Spring/IOC%26DI/BeanFactory.png" alt=""></p><h1 id="Spring命名空间"><a href="#Spring命名空间" class="headerlink" title="Spring命名空间"></a>Spring命名空间</h1><p><strong>命名空间是为了解决相同作用域下的命名问题。</strong></p><p>在C、C++、C#等语言中，都有命名空间的概念。这是为了防止发生命名冲突。</p><p>命名空间可以使变量、函数名称、类名称作用在本空间内，而其他空间可以使用同样的名称。就好比不同的文件夹下可以有相同的文件名一样，但在相同的文件夹下不能有重复的文件名，命名空间就好比这个虚拟的文件夹。如C++中，namespace1:: fun();  namespace2:: fun(); </p><p>Java中的“包”的概念与“命名空间”相似，均可避免命名冲突，对访问进行控制，但在底层机制上还有所不同，Java的包逻辑结构与物理结构的统一，即一个包对应于磁盘上的一个文件夹，不同包里的对象名称自然可以相同，而命名空间在存储时并没有这样一种文件夹的形式，并且Java里包均是并列的，不存在包中再建立一个包的关系，而命名空间可以嵌套。</p><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--xmlns中ns==namespace,context 为命名空间--&gt;</span></span><br><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">常用命名空间</th><th align="left">用途</th></tr></thead><tbody><tr><td align="center">aop</td><td align="left">为声明切面以及@AspectJ注解切面提供配置元素</td></tr><tr><td align="center">beans</td><td align="left">支持声明Bean和装配Bean，是Spring最核心也是最原始的命名空间</td></tr><tr><td align="center">context</td><td align="left">为配置Spring应用上下文提供配置元素，包括自动检测和自动装配、注入非Spring直接管理的对象</td></tr><tr><td align="center">jee</td><td align="left">提供了与J2EE API的集成</td></tr><tr><td align="center">jms</td><td align="left">为声明了消息驱动bean提供配置元素</td></tr><tr><td align="center">lang</td><td align="left">支持配置由Groovy、JRuby或者BeanShell等脚本实现的Bean</td></tr><tr><td align="center">mvc</td><td align="left">启用Spring MVC能力，例如面向注解的控制器、视图控制和拦截器</td></tr><tr><td align="center">oxm</td><td align="left">支持由Java对象到XML的映射配置</td></tr><tr><td align="center">tx</td><td align="left">提供声明式事务配置</td></tr><tr><td align="center">util</td><td align="left">提供各种各样的工具类，包括集合配置为Bean、支持属性占位符元素</td></tr></tbody></table><h1 id="Bean标签与注解的对比"><a href="#Bean标签与注解的对比" class="headerlink" title="Bean标签与注解的对比"></a>Bean标签与注解的对比</h1><ul><li>注解的作用是替代bean标签的配置</li></ul><h2 id="注解标签"><a href="#注解标签" class="headerlink" title="注解标签"></a>注解标签</h2><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>用在类上，用于实例化Bean</td></tr><tr><td>@Controller</td><td>用在web层类上，用于实例化Bean</td></tr><tr><td>@Service</td><td>用于service层类上，用于实例化Bean</td></tr><tr><td>@Repository</td><td>用于dao层类上，用于实例化Bean</td></tr><tr><td>@Autowired</td><td>用在对象上，用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>与@Autowired一起使用，根据名称进行依赖注入</td></tr><tr><td>@Resourse</td><td>相当于@Autowired+@Qualifier，按照名称进行依赖注入</td></tr><tr><td>@Value</td><td>注入普通值</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td>用在方法上，标注该方法是Bean的 初始化方法</td></tr><tr><td>@PreDestroy</td><td>用在方法上，标注该方法是Bean的 销毁方法</td></tr><tr><td>@Configuration</td><td>用在spring配置类上，创建容器是从此类加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定Spring初始化时要扫描的包。同 &lt;context:component-scan base-package=”com.didiqi”&gt;</context:component-scan></td></tr><tr><td>@Bean</td><td>用在方法上，表明该方法返回值存储到Spring容器中</td></tr><tr><td>@PropertySource</td><td>用于加载.properties文件中的配置</td></tr><tr><td>@import</td><td>用于导入其他配置类</td></tr></tbody></table><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>使用注解进行开发时，需要在applicationContext.xml（主配置文件）中配置组件扫描，作用是指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解的组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.didiqi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同样的效果，这个注解写在main函数的类上</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br></pre></td></tr></table></figure><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><ul><li><p>== &lt;bean&gt;</p></li><li><p>表明该类，通过Spring容器管理。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.didiqi.Dao.userDao"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//如不添加bean名，则默认为类名。</span></span><br><span class="line"><span class="comment">//这里的名字 == xml文件bean标签下的 “id” </span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     ...</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller-amp-Service-amp-Repository"><a href="#Controller-amp-Service-amp-Repository" class="headerlink" title="@Controller &amp; @Service &amp; @Repository"></a>@Controller &amp; @Service &amp; @Repository</h3><ul><li>==@Component，之所以要分为三个，是让开发者可以容易区分，见名知层。</li></ul><h3 id="Autowired-amp-Qualifier"><a href="#Autowired-amp-Qualifier" class="headerlink" title="@Autowired &amp; @Qualifier"></a>@Autowired &amp; @Qualifier</h3><ul><li><p>== &lt;property&gt;</p></li><li><p>用于对象的依赖注入</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ref 注入的引用对象对象，即你从哪边取数据==--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--name 放在哪，即你要把取来的数据放在本类的哪个名字的参数下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><h4 id="Autowired-amp-Qualifier-amp-Resourse"><a href="#Autowired-amp-Qualifier-amp-Resourse" class="headerlink" title="@Autowired &amp; @Qualifier &amp; @Resourse"></a>@Autowired &amp; @Qualifier &amp; @Resourse</h4><ul><li>@Autowired + @Qualifier = @Resourse</li></ul><p>@Autowired &amp; @Qualifier一边来说是在一起使用的，但是大多数时候可以只使用@Autowired。</p><p>若只是用@Autowired：</p><p>Spring会根据类型在容器中自动查找。【如果存在多个同样类型的Bean,就会出现问题】</p><p>若@Autowired &amp; @Qualifier都使用：</p><p>Spring会根据@Qualifier（“xxx”）中提供的bean.id ，在容器中查找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Resouce</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><ul><li>普通数据注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"didiqi"</span>)</span><br><span class="line">String name;</span><br><span class="line"><span class="comment">//此时name=="didiqi"。</span></span><br><span class="line"><span class="comment">//但这样使用相当于 String name="didiqi"。无法体现其价值。</span></span><br><span class="line"><span class="comment">//首先明确@Vlaue是注解，是spring的容器的管理工具。所以</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;userDao.name&#125;"</span>)</span><br><span class="line">String name;</span><br><span class="line"><span class="comment">//@Value会在容器中找到userDao类，然后通过EL语法操作。</span></span><br></pre></td></tr></table></figure><h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><ul><li>==&lt;bean&gt;标签中的scope属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.didiqi.Dao.userDao"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">UserDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostConstruct-amp-PreDestory"><a href="#PostConstruct-amp-PreDestory" class="headerlink" title="@PostConstruct &amp; @PreDestory"></a>@PostConstruct &amp; @PreDestory</h3><ul><li>==&lt;bean&gt;标签的 init-method &amp;destory-method 属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">UserDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="comment">// ... //</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.didiqi.Dao.userDao"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destory-method</span>=<span class="string">"destory"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">UserDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="meta">@PreDestory</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="comment">// ... //</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Configuration-amp-Bean"><a href="#Configuration-amp-Bean" class="headerlink" title="@Configuration &amp; @Bean"></a>@Configuration &amp; @Bean</h3><ul><li>==&lt;beans&gt; &amp; &lt;bean&gt;</li><li>可替换xml配置文件,即如在该类前标注@Configuration则==xml文件</li><li>@Bean==bean标签</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackags=<span class="string">""</span>)</span><br><span class="line"><span class="comment">//若不指定其他有注解的类所在路径，则扫描配置类所在包及子包的注解配置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Myconfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//@Bean("xxx"),可以给Bean自定义名==id ，默认为方法名。</span></span><br><span class="line">   <span class="comment">//相当于 &lt;bean id="方法名"，如user，ref="返回类型，ref说明返回的为类引用"/&gt;</span></span><br><span class="line">    <span class="function">User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用AnnotationConfigApplicationContext("xx")获取bean</span></span><br></pre></td></tr></table></figure><h1 id="为什么需要依赖注入"><a href="#为什么需要依赖注入" class="headerlink" title="为什么需要依赖注入"></a>为什么需要依赖注入</h1><p>依赖注入，实在IoC的基础上，将bean依赖的资源，通过容器注入bean。强化了IoC的思想，把Bean的管理都交给容器，用户只需随用随取。</p><p>引用类型注入，我觉得比常量注入更为重要：</p><p>​    比如你早DaoImp层获取了数据，但是最终是要在web层展示，但怎么将这些数据在层与层之间传递呢？</p><p>即依赖注入，传到对应层。 </p><p>1、setter方法；2、配置文件（包括xml构造函数 和注解方式）。依赖注入完成后，系统会自动把数据</p><blockquote><p>xml 中：注入对象时一般需要带有 ref 的标签 取数据，若是普通数据怎使用value或不带ref的；</p><p>注解中：注入对象时一般用@Autowired ，若为普通数据则使用@Value。</p></blockquote><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li><p>setter 方法</p></li><li><p>先 构建setter方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">UserService</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao uesrDao)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.userDao=userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//....//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再 配置xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.didiqi.service.imp.userService"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--ref 注入的引用对象对象，即你从哪边取数据==--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--name 放在哪，即你要把取来的数据放在本类的哪个名字的参数下--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此时userDao持久层的参数，通过容器注入到业务层下的userService类下的userDao变量下---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>xml 构造函数形式–引用类型【需要构造函数配合】：</li></ul><p>先 准备类的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">UserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">   &lt;!--无参构造函数--&gt;  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">   &lt;!--有参构造函数--&gt; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.userDao=userDao;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="comment">//....//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再 配置xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.didiqi.service.imp.userService"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--ref 注入的引用对象对象，即你从哪边取数据==--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--name 放在哪，即你要把取来的数据放在本类的哪个名字的参数下，即set函数中的名字，如setUserDao，name="userDao"--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此时userDao持久层的参数，通过容器注入到业务层下的userService类下的userDao变量下---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>我测试时，无法用无参构造函数依赖注入。</p></blockquote><ul><li>注解形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">UserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="comment">//....//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P命名空间"><a href="#P命名空间" class="headerlink" title="P命名空间"></a>P命名空间</h3><p>P命名空间为了在配置文件中更简便的注入，省去&lt;property&gt;标签的书写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.didiqi.service.imp.userService"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当需要引入时，需要通过property标签==--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>p命名空间</p><p>需要先引入P命名空间：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br></pre></td></tr></table></figure><p>然后注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--当需要引入时，无需通过property标签,而是将标签变成 bean的属性的 方式注入==--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.didiqi.service.imp.userService"</span> <span class="attr">p:userDao-ref</span>=<span class="string">"userDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="构造器注入："><a href="#构造器注入：" class="headerlink" title="构造器注入："></a>构造器注入：</h3><ul><li>利用构造函数</li></ul><ol><li>常量值</li></ol><p>简写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"常量"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>全写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>常量<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>引用</li></ol><p>简写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">ref</span>=<span class="string">"引用"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>全写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"引用"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-ar</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="setter注入："><a href="#setter注入：" class="headerlink" title="setter注入："></a>setter注入：</h3><ol><li>常量值</li></ol><p>​     简写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">value</span>=<span class="string">"常量"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​    全写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">    常量</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/ <span class="attr">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>数组</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无简写形式---&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>列表</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--无简写形式---&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>集合</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无简写形式--&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>字典</li></ol><p>简写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"键常量"</span> <span class="attr">value</span>=<span class="string">"值常量"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"键引用"</span> <span class="attr">value-ref</span>=<span class="string">"值引用"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>全写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">键常量</span><br><span class="line"><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">值常量</span><br><span class="line"><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"键引用"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"值引用"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>Properties：没有简写形式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">”键”</span>&gt;</span>值<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>引用</li></ol><p>​     简写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">ref</span>=<span class="string">"引用"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​    全写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"引用"</span>/&gt;</span><span class="tag">&lt;/ <span class="attr">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="将applicationContext-xml-加载-properties-文件-，获取信息"><a href="#将applicationContext-xml-加载-properties-文件-，获取信息" class="headerlink" title="将applicationContext.xml 加载 .properties 文件 ，获取信息"></a>将applicationContext.xml 加载 .properties 文件 ，获取信息</h1><blockquote><p>需要说明的是可以直接通过配置.xml文件的方式，这里只是多介绍一种注入方式。</p><p>不推荐，太麻烦。</p><p>properties文件提供信息</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jdbc的配置信息</span></span><br><span class="line"></span><br><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>xml文件加载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--首先，需要引入context命名空间和约束路径--&gt;</span>：</span><br><span class="line"><span class="comment">&lt;!--命名空间：--&gt;</span></span><br><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br><span class="line"><span class="comment">&lt;!--约束路径：--&gt;</span></span><br><span class="line">xmlns:xsi="</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd"</span><br><span class="line"><span class="comment">&lt;!--通过context:property-placeholde标签，加载.properties文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--再通过spEL语法，读取.properties文件的值，然后注入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">类似这种形式：</span></span><br><span class="line"><span class="comment">&lt;context:property-placeholder location="xx.properties"/&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="" value="$&#123;key&#125;"/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面的注入方法，就很简便，效果同上。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里，遵照配置xml文件的方法依赖注入的步骤，将属性值注入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--中间构造类无需我们自己写，因为ComboPooledDataSource 这个类是系统写好的--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置完成后，通过Spring API获得实例，如：ClassPathXmlApplication--&gt;</span></span><br></pre></td></tr></table></figure><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/2854d8984dfc" target="_blank" rel="noopener">理解Spring容器、BeanFactory和ApplicationContext</a></p><p><a href="https://blog.csdn.net/marjianjiandandan/article/details/81226210?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="noopener">Spring——控制反转(IOC)和面向切面(AOP)</a></p><p><a href="https://blog.csdn.net/boling_cavalry/article/details/81603303" target="_blank" rel="noopener">spring的BeanFactory和ApplicationContext</a></p><p><a href="https://blog.csdn.net/u011179993/article/details/51636742" target="_blank" rel="noopener">基本容器-BeanFactory</a></p><p><a href="https://www.iteye.com/category/206533" target="_blank" rel="noopener">跟我学spring</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JPA 基本语法</title>
      <link href="/2020/08/14/JPANote/"/>
      <url>/2020/08/14/JPANote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="JPA-Java-Persistence-API-对象持久化的API"><a href="#JPA-Java-Persistence-API-对象持久化的API" class="headerlink" title="JPA [ Java Persistence API:对象持久化的API ]"></a>JPA [ Java Persistence API:对象持久化的API ]</h1><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/JPA/image-20200628145116545.png" alt=""></p><p>注：使用时只需@Entity 进行注解即可使用【Javax.persistence.Entity】。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/JPA/image-20200628145836614.png" alt=""></p><p>注：ORM（Object Relational Mapping  对象关系映射）</p><h2 id="JAP-基本注解"><a href="#JAP-基本注解" class="headerlink" title="JAP 基本注解"></a>JAP 基本注解</h2><h3 id="Entity"><a href="#Entity" class="headerlink" title="@Entity"></a>@Entity</h3><p>JPA 必用，用于实体类声明语句之前，指出该Java类为实体类，将映射到指定的数据库表。</p><p>如，将实体类User 映射到 数据库 user 表。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h3><p>当实体类与数据库表明不一样时，需要使用其标注说明。</p><p>如：实体类名==User,但是想在数据库里命名为t_usre。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"t_user"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Id-amp-GeneratedValue"><a href="#Id-amp-GeneratedValue" class="headerlink" title="@Id&amp;GeneratedValue"></a>@Id&amp;GeneratedValue</h3><p>二者配合使用。Id声明一个实体类的属性为数据库的主键。GeneratedValue 决定主键的生成策略，通过 strategy 属性指定。</p><p>javax.persistence.GenerationType  定义了几种可选策略    {IDENTITY，AUTO，SEQUENCE，TABLE}</p><ul><li>IDENTITY：采用数据库ID自增长的方式来自增主键字段；</li><li>AUTO：JPA自动选择合适的策略，是默认选项；</li><li>SEQUENCE：通过序列产生主键，通过@SequenceGenerator注解指定序列名，MySql不支持这种方式。</li><li>TABLE：通过表产生键，框架借助由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植。</li></ul><p><strong>注</strong>：@Id 通常置于属性声明语句之前；也可置于属性的getter方法之前。</p><p>@Id 也要通过@Column 映射。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"t_user"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"id"</span>,nullable = <span class="keyword">false</span>)</span><br><span class="line"> <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//注：Integer 声明的变量 为类，int声明的变量 为基本数据类型。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span></span>&#123;     <span class="comment">// id 的 getter方法</span></span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这种标注位置也可。</span></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"id"</span>,nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span></span>&#123;     <span class="comment">// id 的 getter方法</span></span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h3><p>将实体的属性映射到数据库中的列（属性）。</p><p>可选属性 {unique，nullable，length ，columnDefinition等}；</p><p>其中columnDefinition 属性 表示该字段在数据中的实际类型。ORM框架可以自动判别实体类字段的类型，但是对于Date类型仍无法确定数据库中字段类型究竟是Date,Time还是Timestamp。这是需要手动设置。</p><p>注：通常置于属性声明语句之前可与@Id 一起使用；也可置于属性的getter方法之前。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column</span>(name=<span class="string">"username"</span>,nullable = <span class="keyword">false</span>,length=<span class="number">50</span>)</span><br><span class="line"><span class="keyword">private</span> String username;</span><br></pre></td></tr></table></figure><h3 id="Basic"><a href="#Basic" class="headerlink" title="@Basic"></a>@Basic</h3><p>简单的属性到数据库表的字段的映射，对于没有任何标注的getXxx()方法，默认即为Basic。</p><p>可选属性 {fetch，optional}</p><ul><li>fetch：表示该属性的读取策略，有EAGER和LAZY两种，分别表示主支抓取和延迟加载，默认为EAGER；</li><li>optional：表示该属性是否允许为null,默认为true。</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时该属性无任何注解，则默认为Basic。</span></span><br></pre></td></tr></table></figure><h3 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h3><p>表明该属性或方法无需映射到数据库，ORM框架自动忽略该属性。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 该方法，不希望保存到数据库。</span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"username:"</span> + fullName + <span class="string">",age:"</span> + age;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Temproal"><a href="#Temproal" class="headerlink" title="@Temproal"></a>@Temproal</h3><p>调整 <strong>Date</strong> 类型的时间精度。</p><p>javax.persistence.Temproal   自带可选属性    { DATE，TIME，TEIMSTAMP}；</p><p>DATE：日期；</p><p>TIME：时间；</p><p>TEIMSTAMP：日期+时间。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//brithDay 属性只要精确到天； createTime 需要精确到日期+时间。</span></span><br><span class="line"><span class="meta">@Temporal</span>(TemporalType.DATE)</span><br><span class="line"><span class="keyword">private</span> Date brithDay;</span><br><span class="line"><span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br></pre></td></tr></table></figure><h3 id="小技巧：表的属性继承"><a href="#小技巧：表的属性继承" class="headerlink" title="小技巧：表的属性继承"></a>小技巧：表的属性继承</h3><p>如果有的属性可以在多个表中出现，为了避免程序的耦合和冗余。可使用继承的方法，将多次使用的属性抽取出来，新建一个BaseEntity 类，通过<strong>@MappedSuperclass</strong> 注解供其他实体类复用。</p><p>使用方法：1、被继承的类 +    <strong>@MappedSuperclass</strong> ；2、继承类 + extends 被继承类名。</p><p>如：属性id。</p><p>例：</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/JPA/image-20200628194023551.png" alt=""></p><p>BaseEntity:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"id"</span>,nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"createTime"</span>,nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//...//</span></span><br><span class="line">    <span class="comment">//...//</span></span><br><span class="line">    <span class="comment">//...//</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">/*  gettr &amp;setter */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OperateLog：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperateLog</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"content"</span>,nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNDI 简述</title>
      <link href="/2020/08/11/JNDINote/"/>
      <url>/2020/08/11/JNDINote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="什么是JNDI"><a href="#什么是JNDI" class="headerlink" title="什么是JNDI"></a>什么是JNDI</h1><p>JNDI： Java Naming And Directory Interface，java命名和目录接口。</p><h2 id="JDBC-amp-JNDI"><a href="#JDBC-amp-JNDI" class="headerlink" title="JDBC &amp; JNDI"></a>JDBC &amp; JNDI</h2><h3 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h3><p>​    程序员通过java调用API，<strong>亲自</strong>连接、操作和释放数据库资源。所以开发人员每次连接都需要关心数据库的驱动信息。如：URL等。而且操作有较强的耦合性，如每次的连接释放操作。JDBC操作的步骤：</p><pre><code>1.  加载驱动程序2.   连接数据库3.  操作数据库4.  关闭数据库，释放连接</code></pre><h3 id="JNDI："><a href="#JNDI：" class="headerlink" title="JNDI："></a>JNDI：</h3><p>​    更灵活，把所有数据库配置和管理都交给服务器容器来做。JNDI通过两个核心功能：1、命名服务；2、目录服务。来管理应用与数据库的连接。外部程序通过对象的名称查找对象资源并使用资源。</p><p>首先JDNI连接数据库时，不是直接向数据库发送请求，而是通过应用服务器（如Tomcat）根据用户先前配置好的驱动信息.xml 文件来连接数据库。这样就体现了两个核心功能：</p><ul><li><p>命名服务：在开发人员连接数据库时，通过使用配置文件中的连接名，就可映射到一个相应的数据库驱动信息，也就是一个对象。</p></li><li><p>目录服务：当管理的对象过多，可以根据不同特征把对象进行分类即目录服务，方便管理。</p></li></ul><h3 id="数据源DataSourse-amp-JNDI"><a href="#数据源DataSourse-amp-JNDI" class="headerlink" title="数据源DataSourse &amp; JNDI"></a>数据源DataSourse &amp; JNDI</h3><p>数据源DataSource是JNDI资源的一种，就是将“DataSource”字符串名称与真正的DataSource对象绑定起来，方便获取。</p><h3 id="数据源与连接池"><a href="#数据源与连接池" class="headerlink" title="数据源与连接池"></a>数据源与连接池</h3><h4 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h4><p>数据源是一个抽象概念。表示数据库的连接。</p><p>如果用户希望建立一个数据库连接，通过查询在JNDI服务中的数据源，可以从数据源中获取相应的数据库连接。这样用户就只需要提供一个逻辑名称（Logic Name），而不是数据库登录的具体细节。</p><h4 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h4><p>数据库提前创建好连接对象。当需要访问数据库时，只需要从数据库连接池中获取空闲的数据库连接，当程序访问数据库结束时，数据库连接会放回数据库连接池中。</p><p>ps：关闭连接对象并不会关闭命名服务本身,而是归还资源。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/JNDI/timg.jpg" alt="timg"></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/JNDI/JNDI.jpg" alt="JNDI"></p><p>这里涉及到Tomcat的内容，可以根据这两张图，清楚知道JNDI、DataSourse、connection pool所处位置和关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Spring 配置Druid数据源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里是通过set方法依赖注入的，不是.xml方式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数据源</span></span><br><span class="line">DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"><span class="comment">//设置数据库连接参数    </span></span><br><span class="line">dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);    </span><br><span class="line">dataSource.setUsername(<span class="string">"root"</span>);    </span><br><span class="line">dataSource.setPassword(<span class="string">"root"</span>);    </span><br><span class="line"><span class="comment">//获得连接对象    </span></span><br><span class="line">Connection connection = dataSource.getConnection();    </span><br><span class="line">System.out.println(connection);</span><br></pre></td></tr></table></figure><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/ibigboy/article/details/84309064" target="_blank" rel="noopener">jndi和jdbc的区别-个人理解</a></p><p><a href="https://www.cnblogs.com/zizi-tothemoon/p/9294246.html" target="_blank" rel="noopener">JNDI和JDBC的区别和联系及其使用方法</a></p><p><a href="https://blog.csdn.net/wn084/article/details/80729230" target="_blank" rel="noopener">JNDI到底是什么？</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JNDI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA笔记</title>
      <link href="/2020/08/09/JavaNote/"/>
      <url>/2020/08/09/JavaNote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="Java基础知识"><a href="#Java基础知识" class="headerlink" title="Java基础知识"></a>Java基础知识</h1><h2 id="OOP-Object-Oriented-Programming"><a href="#OOP-Object-Oriented-Programming" class="headerlink" title="OOP(Object Oriented Programming)"></a>OOP(Object Oriented Programming)</h2><h2 id="三个版本"><a href="#三个版本" class="headerlink" title="三个版本"></a>三个版本</h2><ol><li>JavaSE 标准版  —》桌面程序</li><li>JavaME 嵌入式版 —》手机【几乎消亡】</li><li>JavaEE 企业版 —》web，服务器</li></ol><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ol><li><p>JDK：Java Development Kit  </p><ul><li>JDK = JRE +  Other Development Tool</li></ul></li><li><p>JRE：Runtime Environment</p><ul><li>JRE = JVM + 核心运行类库</li><li>运行已有的Java程序，只需JRE</li></ul></li><li><p>JVM：JAVA Virtual Machine </p><ul><li>JVM是Java跨平台的核心。之所以Java可以跨平台，是因为Java运行并不直接依赖操作系统，而是运行在JVM上。不同的操作系统，需要不同版本的JVM，它不是跨平台的。</li></ul></li></ol><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Java/jdk.jpg" alt=""></p><h2 id="编译-amp-运行"><a href="#编译-amp-运行" class="headerlink" title="编译&amp;运行"></a>编译&amp;运行</h2><p> JAVA 运行步骤：a、编译；b、运行。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Java/image-20200808215209186.png" alt=""></p><p>1）xxx.java 源文件 —》2）javac.exe 编译 —》3）xxx.class java可运行文件（字节码文件）—》4）java.exe  解释运行 </p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><h2 id="String-amp"><a href="#String-amp" class="headerlink" title="String&amp;+"></a>String&amp;+</h2><ul><li><p>任何数据类型和字符串进行连接【‘+’】时，都会变成字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"你好"</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">System.out.println(str+<span class="string">'￥'</span>+num);</span><br><span class="line"></span><br><span class="line"><span class="comment">//result: 你好￥100</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h1><p>数据类型 变量名= 条件判断 ？ 表达式A :表达式B；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> max = a&gt;b ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式必须符合左侧数据类型要求</span></span><br><span class="line"><span class="keyword">int</span> max = a&gt;b ? <span class="number">2.1</span> : <span class="number">10</span>;  <span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h1 id="类的不同实例化内存关系-amp-程序调用过程"><a href="#类的不同实例化内存关系-amp-程序调用过程" class="headerlink" title="类的不同实例化内存关系&amp;程序调用过程"></a>类的不同实例化内存关系&amp;程序调用过程</h1><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Java/image-20200723173034847.png" alt=""></p><p>步骤：</p><p>首先new 数据存放在堆区；类存放在方法区；栈区存放将要运行的数据，其中包括main方法。</p><p>①实例化类后==new 类名()，系统首先从方法去把类的成员变量、成员方法的<strong>地址</strong>放到堆区，②然后在栈区存放堆区该实例化对象的堆内地址。</p><p>如果一个类不同的实例化，在堆区申请到内存后，再把堆内的地址，存放到栈区相应的实例化对象上。</p><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><p>static 关键字的关键之处在于，被他修饰的东西，只跟本类有关，无需创建对象。</p><p>static 关键字修饰的类，方法，变量，无需new 即可调用。</p><p>static 可修饰变量、方法、类。</p><p>修饰变量：</p><p>public static i=0;    // 被修饰的变量属于所在类,所有类成员共享此变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      Person personA=<span class="keyword">new</span> Person();</span><br><span class="line">      Person personB=<span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">      Person.id=<span class="number">10</span>;</span><br><span class="line">      <span class="comment">//personA.id=10;  这种写法不规范，应为id属于Person这个类。</span></span><br><span class="line">      System.out.println(personA.id);</span><br><span class="line">      <span class="comment">//personB.id=20;</span></span><br><span class="line">      Person.id=<span class="number">20</span>;</span><br><span class="line">      System.out.println(personA.id);</span><br><span class="line"><span class="comment">//打印结果：10 20</span></span><br></pre></td></tr></table></figure><h1 id="this-amp-super"><a href="#this-amp-super" class="headerlink" title="this&amp;super"></a>this&amp;super</h1><p>this.成员变量==方便区分类中同名的成员变量或者方法。this 代表访问本类中成员元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">show</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="comment">//如果不加上this 的话方法中会就近使用 参数变量name。而不是成员变量name。</span></span><br><span class="line">        <span class="comment">//this.name ==Person.name</span></span><br><span class="line">    ​System.out.println(name+<span class="string">"哈哈"</span>+<span class="keyword">this</span>.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>super.父类成员变量：当父类与子类各自有重名成员变量，需要通过super关键字，访问父类中的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量。</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> num=<span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//访问局部变量num</span></span><br><span class="line">System.out.println(<span class="string">"local num="</span> + num);</span><br><span class="line"><span class="comment">//访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">"Fu num="</span> + <span class="keyword">super</span>.num);</span><br><span class="line"><span class="comment">//访问子类中的num</span></span><br><span class="line">System.out.println(<span class="string">"Zi num="</span> + <span class="keyword">this</span>.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">演示结果：</span><br><span class="line">local num = <span class="number">4</span></span><br><span class="line">Fu num = <span class="number">5</span></span><br><span class="line">Zi num = <span class="number">6</span></span><br></pre></td></tr></table></figure><p>注：super()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">Fu()&#123;</span><br><span class="line">System.out.println(<span class="string">"Fu()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">Zi()&#123;</span><br><span class="line"><span class="comment">// super（），调用父类无参构造方法,默认情况系统会自动调用super()。不用手动加。</span></span><br><span class="line"><span class="comment">//如果要调用父类有参构造方法，可以在super(e1,e2...)中添加参数，系统会自动匹配对应的构造方法。</span></span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">System.out.println(<span class="string">"Zi（）"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo07</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">Fu（）</span><br><span class="line">Zi（）</span><br></pre></td></tr></table></figure><h1 id="Scanner-amp-Random-amp-ArrayList"><a href="#Scanner-amp-Random-amp-ArrayList" class="headerlink" title="Scanner&amp;Random&amp;ArrayList"></a>Scanner&amp;Random&amp;ArrayList</h1><p>这三者的使用方法一致：</p><ul><li>创建对象</li></ul><p>Scanner scanner=new Scanner();</p><p>Random random=new Random();</p><p>ArrayList&lt;数据类型&gt; arrayList =new ArrayList&lt;&gt; ();</p><ul><li>通过.方法使用对象</li><li>常用方法</li></ul><p>.add()</p><p>.get()</p><p>.remove()</p><p>.size()</p><p>注：数据类型只能写引用型，不能是基本型。如char，int等不可以，但是可以用Character,Interger 等基本类型包装类。</p><h1 id="基本数据类型-amp-引用数据类型"><a href="#基本数据类型-amp-引用数据类型" class="headerlink" title="基本数据类型&amp;引用数据类型"></a>基本数据类型&amp;引用数据类型</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table><thead><tr><th align="center">No.</th><th align="center">数据类型</th><th align="center">大小/位</th><th align="center">可表示数据范围</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>byte</code>（字节型）</td><td align="center">8</td><td align="center">-128~127</td><td align="center">0</td></tr><tr><td align="center">2</td><td align="center"><code>short</code>（短整型）</td><td align="center">16</td><td align="center">-32768~32767</td><td align="center">0</td></tr><tr><td align="center">3</td><td align="center"><code>int</code>（整型）</td><td align="center">32</td><td align="center">-2147483648~2147483647</td><td align="center">0</td></tr><tr><td align="center">4</td><td align="center"><code>long</code>（长整型）</td><td align="center">64</td><td align="center">-9223372036854775808~9223372036854775807</td><td align="center">0</td></tr><tr><td align="center">5</td><td align="center"><code>float</code>（单精度）</td><td align="center">32</td><td align="center">-3.4E38~3.4E38</td><td align="center">0.0</td></tr><tr><td align="center">6</td><td align="center"><code>double</code>（双精度）</td><td align="center">64</td><td align="center">-1.7E308~1.7E308</td><td align="center">0.0</td></tr><tr><td align="center">7</td><td align="center"><code>char</code>（字符）</td><td align="center">16</td><td align="center">0~255</td><td align="center">‘\u0000’</td></tr><tr><td align="center">8</td><td align="center"><code>boolean</code>（布尔）</td><td align="center">-</td><td align="center">true或false</td><td align="center">false</td></tr></tbody></table><h3 id="char的特殊。"><a href="#char的特殊。" class="headerlink" title="char的特殊。"></a>char的特殊。</h3><p>在定义变量时其他类型也能装入一个字符，但是输出时只有char 会默认输出原字符形式，其他数据类型会将存入字符的Unicode码输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a= <span class="string">'中'</span>;</span><br><span class="line"><span class="keyword">short</span> b= <span class="string">'中'</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="comment">//result ：中  20013</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// \uxxxx就是Unicode编码的意思，这里指的是 c='a'，16*6+1=97</span></span><br><span class="line"><span class="keyword">char</span> c = \u0061</span><br></pre></td></tr></table></figure><p>char类型在进行数学运算时，会自动转换成数字。进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch= <span class="string">'a'</span>;</span><br><span class="line">System.out.println(ch+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//result：98</span></span><br></pre></td></tr></table></figure><ul><li><p>数字可以使用下划线分割，方便。【JDK7以上支持】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10_000_000</span>;</span><br><span class="line">System.out.print(a)</span><br><span class="line"><span class="comment">//result 10000000</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>当数据类型不一样时，将会发生数据类型转换。</p><h4 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h4><ul><li>需满足：从小—-&gt;到大 的数据类型</li></ul><p>Ps:byte ,char,short -&gt; int -&gt; long -&gt; float -&gt; double。字节数不一定与数据范围相关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">long</span> numOne=num;</span><br><span class="line"><span class="comment">//左边==long类型；100==int类型。</span></span><br><span class="line"><span class="comment">//但是赋值给numberOne时并没有报错，这里就实现了自动转换。</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">//下面这种写法就无需自动转换。</span></span><br><span class="line"><span class="keyword">long</span> numTwo=<span class="number">100L</span>;</span><br></pre></td></tr></table></figure><h4 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> num=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> numOne = num;</span><br><span class="line"><span class="comment">//左边==int类型；100==long类型。</span></span><br><span class="line"><span class="comment">//但是赋值时将会报错，这里就需要强制转换。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//强制转化可能会出现数据溢出，精度损失（对于浮点数）需要注意。</span></span><br><span class="line"><span class="keyword">int</span> numOne =(<span class="keyword">int</span>)num;</span><br></pre></td></tr></table></figure><ul><li><p>byte、char、short 特殊性</p><p>这三种类型在计算时，会自动提升至int数据类型。需强制转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> c=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//byte re = b+c;  //这种写法会编译报错</span></span><br><span class="line"><span class="keyword">byte</span> re = (<span class="keyword">byte</span>)(b+c) <span class="comment">//正确</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型。</p><p>区别：</p><p>基本数据类型都是存储在栈中，特别在赋值时等于复制了另一份。二者相互无关。而引用类型传递的是地址，数据存放在堆中。所以说二者相互关联。除String 外。</p><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="String-的不变性"><a href="#String-的不变性" class="headerlink" title="String 的不变性"></a>String 的不变性</h2><p>String 一旦创建 创建不可改变。String 类中有vlaue,offset,size的私有属性。</p><p>其中value值==char value[] ，他的底层就是一个字符数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//虽然这里的str1中的值看起来改变了，实际上系统在堆区又新创建了内存保存“他好”，并将地址返回给str1。</span></span><br><span class="line">String str1=<span class="string">"你好"</span>;</span><br><span class="line">str1=<span class="string">"他好"</span>;</span><br><span class="line">System.out.println(str1);</span><br></pre></td></tr></table></figure><h2 id="创建方式："><a href="#创建方式：" class="headerlink" title="创建方式："></a>创建方式：</h2><ul><li>空参构造</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> String();</span><br></pre></td></tr></table></figure><ul><li>根据字符数组创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[]  charArray=&#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> String(charArray);</span><br></pre></td></tr></table></figure><ul><li>根据字节数组创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//49,50,51 是ASCLL码对应这字符’1‘，’2‘，’3‘。</span></span><br><span class="line"><span class="keyword">byte</span>[] byteArray=&#123;<span class="number">49</span>,<span class="number">50</span>,<span class="number">51</span>&#125;;</span><br><span class="line"><span class="keyword">new</span> String(byteArray);</span><br></pre></td></tr></table></figure><ul><li>直接创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种创建方式，str 是存放在堆中的字符串常量池中的。</span></span><br><span class="line">String str=<span class="string">"123"</span>;</span><br></pre></td></tr></table></figure><h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h2><p>只有直接创建方式，会使用字符串常量池。当使用直接方法创建字符串时，若出现重复的字符串，将=不会重复开辟堆空间，而是重复利用。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Java/image-20200726001721181.png" alt="image-20200726001721181"></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><p>.equals(Object object)</p></li><li><p>.equalsIgnoreCase(String str)</p></li><li><p>.length()</p></li><li><p>.concat(String str)     //连接字符串到末尾,返回拼接后的字符串。</p></li><li><p>.charAt(int index)     //返回指定索引的char 值</p></li><li><p>.indexOf(String str)       //返回指定自负床第一次出现的索引。</p></li><li><p>.substring(int beginIndex)   //从benginIndex 开始截取字符串到末尾。并返回。</p></li><li><p>.substring(int beginIndex,int endIndex)   从benginIndex 开始截取字符串到endIndex。并返回,不含endIndex。</p></li></ul><p>转换功能的方法</p><ul><li>.toCharArray () ：将此字符串转换为新的字符数组。 </li><li>.getBytes () ：使用平台的默认字符集将该 String编码转换为新的字节数组byte []。 </li><li>replace (CharSequence target, CharSequence replacement) ：将与target匹配的字符串使 用replacement字符串替换。//CharSequence==String</li></ul><p>分割功能的方法</p><ul><li>public String[] split(String regex) ：将此字符串按照给定的regex（规则）拆分为字符串数组。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建字符串对象</span></span><br><span class="line">String s = <span class="string">"aa|bb|cc"</span>;</span><br><span class="line">String[] strArray = s.split(<span class="string">"|"</span>); <span class="comment">// ["aa","bb","cc"]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; strArray.length; x++) &#123;</span><br><span class="line">System.out.println(strArray[x]); <span class="comment">// aa bb cc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="override-重写"><a href="#override-重写" class="headerlink" title="override 重写"></a>override 重写</h1><p>子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效 果。</p><p>注：</p><ol><li><p>子类方法覆盖父类方法，必须要保证权限大于等于父类权限。权限【public&gt;protected&gt;private】</p></li><li><p>子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Fu show"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">//子类重写了父类的show方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Zi show"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo05</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line"><span class="comment">// 子类中有show方法，只执行重写后的show方法</span></span><br><span class="line">z.show(); <span class="comment">// Zi show</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>抽象方法 ： 没有方法体的方法。</p><p> 抽象类：包含抽象方法的类。在class之前写上abstract 关键字即可。</p><p>在定义方法是将abstract 放在修饰符后面。如：public abstract void fun();</p><p>这个抽象类有点像mvc中的接口，先写一个父类，里面只有抽象方法（没有具体实现）。然后生成一个子类，对父类所有抽象方法，都进行重写即完成方法的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//生成子类</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class Cat extends Animal </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"小猫在墙头走~~~"</span>)；</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建子类对象</span></span><br><span class="line">Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="comment">// 调用run方法</span></span><br><span class="line">c.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">小猫在墙头走~~~</span><br></pre></td></tr></table></figure><p>注：</p><p>抽象类不一定全是抽象方法。但子类必须重写全部抽象方法。除非子类也是抽象类。</p><p>抽象类不能创建对象，即不可new（）。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>定义：把原来的class 关键字换成 interface 即可。</p><p>其中接口中过的抽象类 固定修饰关键字==public abstact，可以不写系统默认添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这两种写法一样的。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterFaceName</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterFaceName</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法：</p><p> 创建实现类对象。 new 实现类()。不能创建接口类的对象，这里同抽象类。</p><p>接口类中的变量，一旦赋值就不可修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">InterFacName</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二者是一样的，系统默认添加 public static final。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//int num=10;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：接口中，没有<strong>构造方法</strong>，没有<strong>静态代码块</strong>。</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><ul><li><p>父类类型  变量名  = new 子类对象</p></li><li><p>接口类型  变量名  = new 接口实现对象</p></li></ul><p>这样通过调用父类类型（接口类型），可以使用此父类下的所有成员。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Java/image-20200727215019596.png" alt="image-20200727215019596"></p><h2 id="对象的向上转型："><a href="#对象的向上转型：" class="headerlink" title="对象的向上转型："></a>对象的向上转型：</h2><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Java/image-20200727215330342.png" alt="image-20200727215330342"></p><h2 id="对象的向下转型："><a href="#对象的向下转型：" class="headerlink" title="对象的向下转型："></a>对象的向下转型：</h2><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/Java/image-20200727220345378.png" alt="image-20200727220345378"></p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><ul><li>final class ,修饰一个类==当前这个类不能有子类，即不可继承。</li><li>final method.修饰一个方法==当前方法不可被重写。</li><li>final  localVariable ,修饰一个局部变量==一次赋值，不可再次修改。</li><li>final  成员变量，修饰成员变量==必须手动赋值，不会给默认值。</li></ul><h1 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h1><table><thead><tr><th align="center"></th><th align="center">public</th><th align="center">protected</th><th align="center">default（空的）</th><th align="center">private</th></tr></thead><tbody><tr><td align="center">同一类中</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">同一包中(子类与无关类)</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td align="center">不同包的子类</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">不同包中的无关类</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date time=<span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(time);</span><br><span class="line"><span class="comment">//结果：Tue Jul 28 12:54:49 CST 2020</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date time=<span class="keyword">new</span> Date();</span><br><span class="line"><span class="keyword">long</span> timeMs=time.getTime();</span><br><span class="line">System.out.println(time);</span><br><span class="line"><span class="comment">//结果：1595912295482  long型；从1970-1-1 00:00:00到现在的时间，单位ms</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Date date=<span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//将Date 对象格式化为simpleDateFormat()对象中的格式。</span></span><br><span class="line">SimpleDateFormat time=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>);</span><br><span class="line">String dateFormat= time.format(date);</span><br><span class="line">System.out.println(dateFormat);</span><br><span class="line"><span class="comment">//结果：2020年07月28日 12时33分54秒</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将2020年07月28日 12时33分54秒</span></span><br><span class="line">String dateStr=<span class="string">"2020年07月28日 12时33分54秒"</span>;</span><br><span class="line">SimpleDateFormat time=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>);</span><br><span class="line">Date dateFormat= time.parse(dateStr);</span><br><span class="line"><span class="comment">//parse 解析出来的时间为Date型：Tue Jul 28 12:54:49 CST 2020</span></span><br><span class="line">System.out.println(dateFormat);</span><br><span class="line"><span class="comment">//结果：Tue Jul 28 12:54:49 CST 2020</span></span><br></pre></td></tr></table></figure><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div><div class="note danger">            <p>🚥🍀  ~ · · · <strong>未完，更新ING</strong> · · · ~</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/08/09/designPatternNote/"/>
      <url>/2020/08/09/designPatternNote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="为什么需要设计模式"><a href="#为什么需要设计模式" class="headerlink" title="为什么需要设计模式"></a>为什么需要设计模式</h1><ul><li><p>软件设计中普遍存在（反复出现）的各种问题，所提出的固定解决方案。</p></li><li><p>减少耦合，提高内聚，增加可维护性、可扩展性。</p></li><li><p>设计模式 == OOA【面对对象分析】 +OOD【面对对象设计】</p></li></ul><h1 id="软件开发中设计模式所处位置"><a href="#软件开发中设计模式所处位置" class="headerlink" title="软件开发中设计模式所处位置"></a>软件开发中设计模式所处位置</h1><p> 面向对象（语言）=&gt; 功能模块[设计模式+算法(数据结构)] =&gt; 框架[使用到多种设计模式]  =&gt;  架构 [服务器集群]</p><h1 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h1><table><thead><tr><th align="center">设计原则名称</th><th align="center">定义</th><th align="center">使用频率</th></tr></thead><tbody><tr><td align="center">单一职责原则 （SRP）</td><td align="center">一个类只负责一项职责</td><td align="center">1</td></tr><tr><td align="center">开闭原则（OCP）</td><td align="center">对扩展开放，对修改关闭</td><td align="center">2</td></tr><tr><td align="center">里氏替换原则（LSP）</td><td align="center">所有引用基类（父类）的地方，可以使用其子类的对象</td><td align="center">3</td></tr><tr><td align="center">依赖倒转（倒置）原则（DIP）</td><td align="center">抽象不依赖细节，细节依赖于抽象</td><td align="center">4</td></tr><tr><td align="center">合成复用原则（CRP）</td><td align="center">尽量使用对象组合，而不通过继承达到复用目的</td><td align="center">5</td></tr><tr><td align="center">迪米特法则（LoD）</td><td align="center">一个软件实体尽可能少的与其他实体发生相互作用</td><td align="center">6</td></tr><tr><td align="center">接口隔离原则（ISP）</td><td align="center">使用多个专门接口，不使用单一的总接口</td><td align="center">7</td></tr></tbody></table><ul><li>类的职责<ol><li>数据职责—-》通过属性实现</li><li>行为职责—-》通过方法实现</li></ol></li></ul><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><ul><li>如 类 A 负责两个不同职责：职责 1，职责 2。职责1的变动，可能会影响职责2的执行。</li></ul><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div><div class="note danger">            <p>🚥🍀  ~ · · · <strong>未完，更新ING</strong> · · · ~</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML之类图关系</title>
      <link href="/2020/08/09/UMLNote/"/>
      <url>/2020/08/09/UMLNote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="UML-Unified-Mode-Language-统一建模语言"><a href="#UML-Unified-Mode-Language-统一建模语言" class="headerlink" title="UML(Unified Mode Language)统一建模语言"></a>UML(Unified Mode Language)统一建模语言</h1><h1 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h1><ul><li>事物</li><li>关系</li><li>图</li></ul><h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><ul><li><p>描述系统中类（对象）与类（对象）之间的各种静态关系。</p></li><li><p>说明：UML有多种类型的图，因为我在学习设计模式，所以这里主要讲类图</p></li></ul><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><table><thead><tr><th align="center">关系名</th><th align="center">图标</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">依赖（使用）</td><td align="center"><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/UML/image-20200809215838518.png" alt="image-20200809215838518"></td><td align="left">普通箭头 + 虚线，指向被使用者</td></tr><tr><td align="center">关联（协作）</td><td align="center"><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/UML/image-20200809221230809.png" alt="image-20200809221230809"></td><td align="left">普通箭头 + 实心线，指向被拥有者</td></tr><tr><td align="center">泛化（继承）</td><td align="center"><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/UML/image-20200809215714144.png" alt="image-20200809215714144"></td><td align="left">三角箭头 + 实线，箭头指向父类</td></tr><tr><td align="center">实现</td><td align="center"><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/UML/image-20200809215639805.png" alt="image-20200809215639805"></td><td align="left">三角箭头 + 虚线，箭头指向接口</td></tr><tr><td align="center">聚合</td><td align="center"><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/UML/image-20200809215556167.png" alt="image-20200809215556167"></td><td align="left">空心菱形 + 实心线，菱形指向整体</td></tr><tr><td align="center">组合</td><td align="center"><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/UML/image-20200809220439873.png" alt="image-20200809220439873"></td><td align="left">实心菱形 + 实线，菱形指向整体</td></tr></tbody></table><table><thead><tr><th align="center">关系名</th><th align="center">定义</th></tr></thead><tbody><tr><td align="center">依赖</td><td align="center">使用的关系，某个类使用另一个类的对象。</td></tr><tr><td align="center">关联</td><td align="center">拥有的关系，一个类知道另一个类的属性和方法；如：老师与学生。关联既有双向的，也有单向的。双向的可以用两个箭头或者无箭头表示，单向的用一个箭头。</td></tr><tr><td align="center">实现</td><td align="center">类与接口的关系，表示类是接口的实现。</td></tr><tr><td align="center">聚合</td><td align="center">整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎，轮胎离开车仍然可以存在。</td></tr><tr><td align="center">组合</td><td align="center">整体与部分的关系，但部分不能离开整体而单独存在。</td></tr><tr><td align="center">泛化</td><td align="center">一种继承关系,它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种。</td></tr></tbody></table><p>强- - - &gt; 弱 顺序：</p><p>*<em>泛化  =  实现  &gt;  组合   &gt;  聚合  &gt;  关联  &gt;  依赖  *</em></p><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/UML/timg.jpg" alt="timg"></p><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/tianhai110/article/details/6339565" target="_blank" rel="noopener">UML类图几种关系的总结</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown 基本语法</title>
      <link href="/2020/08/08/markDownNote/"/>
      <url>/2020/08/08/markDownNote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><ul><li><p>语法符号：‘ <kbd>#</kbd> ’，井号 。</p></li><li><p>语法格式：‘# + 空格 + 标题名’</p></li><li><p>几个＃代表标题等级；1级最高，共有六个级别。</p></li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><ul><li><p>语法符号：‘<kbd> ** </kbd> 或者 <kbd>__</kbd>’，两个星号或者两个下划线’；</p></li><li><p>语法格式：’’ ** + 需加粗部分 + ** ‘’。</p></li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**粗体文字**</span></span><br></pre></td></tr></table></figure><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><ul><li><p>语法符号：‘ <kbd>*</kbd> ’ 或者 ‘ <kbd>_</kbd> ’，星号或者下划线（底线）；</p></li><li><p>语法格式：’’ * + 需斜体部分 + * ‘’。</p></li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span> </span><br><span class="line"></span><br><span class="line">//既要斜体又要粗体</span><br><span class="line">//三个星号或者底线</span><br><span class="line"><span class="strong">***加粗斜体**</span>*</span><br></pre></td></tr></table></figure><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>语法符号：‘ <kbd>~~</kbd> ’ ，两个波浪线；</p><p>语法格式：’’ ~~ + 需删除线部分 + ~~‘’。</p><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><ul><li><p>语法符号：’<kbd>&lt;u></kbd>‘标签；</p></li><li><p>语法格式：‘ &lt;u&gt;需带下划线文本&lt;/u&gt; ’ 。</p></li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>带下划线文本<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h1><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><ul><li>你可以在一行中用三个以上的星号、减号、底线(按住shift + ‘-’号键)来建立一个分隔线，行内不能有其他东西。</li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="emphasis">___</span></span><br><span class="line">//你也可以在星号或是减号中间插入空格。</span><br><span class="line"><span class="bullet">- </span>- -</span><br><span class="line"><span class="bullet">* </span><span class="emphasis">* *</span></span><br><span class="line"><span class="emphasis">_ _</span> _</span><br></pre></td></tr></table></figure><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><ul><li><p>语法符号：” <kbd>[^]</kbd> “，方括号+异或号；</p></li><li><p>语法格式：” [‘^’要注明的文本] “，然后在后面添加脚注内容 。如，[]:脚注内容。</p></li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建脚注 [^脚注测试]。</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^脚注测试</span>]: <span class="link">脚注创建成功！！！</span></span><br></pre></td></tr></table></figure><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><ul><li><p>语法符号：” <kbd>```</kbd> “，反引号；</p></li><li><p>语法格式：”``` 指定语言 + 代码``` “，可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）。</p></li><li><p>ps:使用时，键入<kbd>```</kbd> + 语言名 + <kbd>Enter </kbd>后会自动插入一块代码块区域。</p></li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">``` </span></span><br><span class="line"><span class="code">System.out.print("代码块")</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul><li><p>语法符号：’  <kbd>!</kbd>+<kbd>[ ]</kbd>+<kbd>( )</kbd>  ‘，感叹号+方括号+小括号；</p></li><li><p>语法格式：‘ ![图片无法加载时替代文字](图片路径) ‘ 。</p></li><li><p>ps:替换文字可不写</p></li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">替换文字</span>](<span class="link">image_path</span>)</span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ul><li><p>语法符号：’ <kbd>[ ]</kbd>+<kbd>( )</kbd> ‘，方括号+小括号；</p></li><li><p>语法格式：‘ [文字](链接路径) ‘ 。</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [<span class="string">链接</span>](<span class="link">https://www.cyberboy.online</span>)</span><br><span class="line"></span><br><span class="line">//若需直接使用链接，则</span><br><span class="line"><span class="xml"><span class="tag">&lt; 链接地址 &gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">https:</span>//<span class="attr">www.cyberboy.online</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><ul><li><p>制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p></li><li><p>ps:不推荐使用这种方法插入表格，比较麻烦。如有markdown编辑软件，可直接通过功能菜单插入。</p></li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li><p>语法符号：’ <kbd>*</kbd> 或 <kbd>+</kbd> 或 <kbd>-</kbd>  ‘，星号 或 加号 或 减号；</p></li><li><p>语法格式：‘ <kbd>*</kbd>+<kbd>空格</kbd>+<kbd>内容</kbd>‘ </p></li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>第一项</span><br><span class="line"><span class="bullet">* </span>第二项</span><br><span class="line"><span class="bullet">* </span>第三项</span><br></pre></td></tr></table></figure><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ul><li>语法格式：‘ <kbd> 数字 </kbd> + <kbd> . </kbd> + <kbd> 空格 </kbd> + <kbd> 内容 </kbd>‘ </li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>第一项</span><br><span class="line"><span class="bullet">2. </span>第二项</span><br><span class="line"><span class="bullet">3. </span>第三项</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><ul><li><p>语法符号：’ <kbd>\</kbd>  ‘，反斜杠；</p></li><li><p>语法格式：‘ \ 转义符号‘ 。</p></li></ul><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号</p><table><thead><tr><th align="center">\</th><th align="center">反斜线</th></tr></thead><tbody><tr><td align="center">`</td><td align="center">反引号</td></tr><tr><td align="center">*</td><td align="center">星号</td></tr><tr><td align="center">_</td><td align="center">下划线</td></tr><tr><td align="center">！</td><td align="center">感叹号</td></tr><tr><td align="center">.</td><td align="center">英文句点</td></tr><tr><td align="center">-</td><td align="center">减号</td></tr><tr><td align="center">+</td><td align="center">加号</td></tr><tr><td align="center">#</td><td align="center">井号</td></tr><tr><td align="center">()</td><td align="center">小括号</td></tr><tr><td align="center">[]</td><td align="center">方括号</td></tr><tr><td align="center">{}</td><td align="center">花括号</td></tr></tbody></table><h2 id="兼容html-标签"><a href="#兼容html-标签" class="headerlink" title="兼容html 标签"></a>兼容html 标签</h2><ul><li>常见的的 HTML 元素有：&lt;br&gt; 、&lt;kbd&gt;、&lt;h1&gt;等  </li></ul><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>HTML标签<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat 简介</title>
      <link href="/2020/08/07/tomcatNote/"/>
      <url>/2020/08/07/tomcatNote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="HTTP工作过程"><a href="#HTTP工作过程" class="headerlink" title="HTTP工作过程"></a>HTTP工作过程</h1><p>HTTP协议是B/S 之间的数据协议。主要规定了客户端和服务器之间的通信格式，作为应用层协议，一般不涉及数据包（packet）的传输。它基于TCP/IP协议来传输数据。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/tomcatNote/image-20200807112624724.png" alt=""></p><h1 id="Tomcat架构"><a href="#Tomcat架构" class="headerlink" title="Tomcat架构"></a>Tomcat架构</h1><h2 id="Tomcat架构的必要性"><a href="#Tomcat架构的必要性" class="headerlink" title="Tomcat架构的必要性"></a>Tomcat架构的必要性</h2><p>图一，当服务被部署到服务器，当用户想服务器发送http请求以完成不同的业务需求时，服务器需要不断调用具体的业务类。耦合性较高。</p><p>于是Tomcat 架构是非常有必要的，tomcat架构中，服务器将用户请求直接转发给Servlet容器，通过Servlet来实现对具体业务层的调用。实现连接处理和业务处理的分离。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/tomcatNote/image-20200807113459302.png" alt="image-20200807113459302"></p><h2 id="Servlet工作过程"><a href="#Servlet工作过程" class="headerlink" title="Servlet工作过程"></a>Servlet工作过程</h2><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/tomcatNote/image-20200807114035741.png" alt="image-20200807114035741"></p><p>用户–&gt;httpRequeset—转发–&gt;ServletRequest—&gt;Servlet容器–&gt;根据服务定位对应的servlet方法–&gt;{if 已加载（init） -then 调用(使用service方法处理请求) else 先加载 then 调用（使用service方法处理请求）}—&gt;ServletResponse—&gt;Http服务器–&gt;解析后返回给用户。</p><h2 id="Tomcat整体架构"><a href="#Tomcat整体架构" class="headerlink" title="Tomcat整体架构"></a>Tomcat整体架构</h2><p>Tomcat是Servlet的容器。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/tomcatNote/tomcat.png" alt="tomcat"></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/tomcatNote/image-20200807145901371.png" alt="image-20200807145901371"></p><table><thead><tr><th align="center">组件</th><th>职责</th></tr></thead><tbody><tr><td align="center">Server</td><td>表示整个servlet容器，因此Tomcat容器中只有一个Server实例。</td></tr><tr><td align="center">Service</td><td>表示一个或多个Connector的集合。这些Connector共享同一个Container来处理其他请求。在一个Server中可以包含多个Service，这些Service相互独立。</td></tr><tr><td align="center">Connector</td><td>用于监听并转换为Socket请求，将该请求交由Container处理，支持不同的协议及不同IO方式</td></tr><tr><td align="center">Container</td><td>代表一类组件，这类组件的作用就是接收客户端请求并返回响应数据，具体操作委派到子组件完成。在Tomcat中存在不同级别的容器：Engine、Host、Context、Wrapper。</td></tr><tr><td align="center">Engine</td><td>表示整个Servlet引擎，Engine为最高级别的容器。尽管Engine不是直接处理请求的容器却是获得目标容器的入口。</td></tr><tr><td align="center">Host</td><td>表示Engine中的虚拟机，与一个服务器的网络名有关，如域名等。客户端可以使用这个网络名连接服务器，这个名称必须要在DNS服务器上注册。</td></tr><tr><td align="center">Context</td><td>用于表示ServletContext，在Servlet规范中，一个ServletContext表示一个Web应用。</td></tr><tr><td align="center">Wrapper</td><td>表示Web应用中定义的Servlet。</td></tr></tbody></table><ul><li>补充说明：<ol><li>Connector/Container：将网络协议和请求处理从概念上分开。连接器：外部网络；容器：请求处理。</li><li>Service：一个Service包含多个Connection和一个Container。更好判断Conection由哪个Container来处理。</li><li>Context：当接收到Connection请求时，能够找到一个合适的Web应用来处理。</li><li>Container：一个概念。整个servlet 的引擎。为了与Tomcat组件命名一致，将Container重新命名为Engine。</li><li>Wrapper：一个概念。一个Web应用中，可以包含多个servlet实例来处理不同链接的请求。需要一个组件概念来表示servlet。所以在Tomcat中servlet定义被称为Wrapper。</li></ol></li></ul><p>所以，Tomcat 的核心组件：①连接器（Connector）和容器（Container）。</p><h3 id="Coyote-amp-Catalina"><a href="#Coyote-amp-Catalina" class="headerlink" title="Coyote&amp;Catalina"></a>Coyote&amp;Catalina</h3><p>connector 具体实现==Coyote；Servlet容器 具体实现==Catalina；</p><p>Catalina，一个Catalina实例，管理一个server。用来创建各个容器组件。同时负责启动、停止应用服务器。</p><p>一个tomcat容器只有一个catalina容器，可以由多个coyote同时提供通信服务。</p><p>PS：Coyote与Catalina 不是对等的关系。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/tomcatNote/image-20200807122528593.png" alt="image-20200807122528593"></p><h3 id="连接器Connector"><a href="#连接器Connector" class="headerlink" title="连接器Connector"></a>连接器Connector</h3><p>Coyte：tomcat连接器框架的名称，发送和响应请求。负责具体协议和I/O操作；</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/tomcatNote/connector.png" alt="connector"></p><h3 id="容器Container"><a href="#容器Container" class="headerlink" title="容器Container"></a>容器Container</h3><p>Catalina是Tomcat的Servlet容器的实现。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/tomcatNote/tomcat.jpg" alt="tomcat"></p><h2 id="工作过程："><a href="#工作过程：" class="headerlink" title="工作过程："></a>工作过程：</h2><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/tomcatNote/20180308173032224.png" alt="img"></p><h1 id="Web架构中的tomcat"><a href="#Web架构中的tomcat" class="headerlink" title="Web架构中的tomcat"></a>Web架构中的tomcat</h1><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/tomcatNote/image-20200807145933597.png" alt="image-20200807145933597"></p><p>PS:在springboot框架中，内嵌了tomcat功能。</p><div class="note info">            <p>🎯 本文为个人学习笔记，若有错误之处，请在下方留言。将会及时修正。</p>          </div><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p><a href="https://www.cnblogs.com/tianhaichao/p/12664956.html" target="_blank" rel="noopener">Tomcat学习之体系架构</a></p><p><a href="https://blog.csdn.net/qq_26323323/article/details/84848305?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="noopener">Tomcat基本架构解析</a></p><p><a href="https://blog.csdn.net/u014231646/article/details/79482195" target="_blank" rel="noopener">Tomcat（一）:简介</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用手册</title>
      <link href="/2020/08/03/gitNote/"/>
      <url>/2020/08/03/gitNote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="系统框图"><a href="#系统框图" class="headerlink" title="系统框图"></a>系统框图</h1><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="git工作流程"></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200802214658655.png" alt="image-20200802214658655"></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200802231847946.png" alt="image-20200802231847946"></p><h1 id="创建本地库"><a href="#创建本地库" class="headerlink" title="创建本地库"></a>创建本地库</h1><ul><li><input disabled="" type="checkbox"> <p>确定好本地库位置，git init 后，会产生.git 文件（隐藏文件）</p><p>注：.git文件==本地库（版本库），git所在的文件夹==工作区；git目录下的index文件==暂存区。</p></li><li><input disabled="" type="checkbox"> <p>配置签名命令(系统级别，全局可用，不同的项目都使用其作为标识)，远程仓库用来区分不同提交者身份。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//此name和email与github的用户名和邮箱无关，仅仅作为一个身份标识。</span><br><span class="line">//当然你也可以使用 github的用户名和邮箱</span><br><span class="line">git config --global user.name xxx</span><br><span class="line"></span><br><span class="line">git config --global user.email xxxx</span><br><span class="line"></span><br><span class="line">//会在 C:\Users\blueDam[你的电脑用户名] 路径下生成.gitconfig文件</span><br></pre></td></tr></table></figure><h1 id="关联远程库"><a href="#关联远程库" class="headerlink" title="关联远程库"></a>关联远程库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//查看与本地库关联的远程库</span><br><span class="line">git remote -v</span><br><span class="line">//如果为空，则没有相关联的远程库</span><br><span class="line"></span><br><span class="line">//给本地添加远程库关联</span><br><span class="line">git remote add origin  远程库地址</span><br><span class="line">//ps:origin 是此关联的名称，可自己修改，默认为origin。</span><br><span class="line">//ps:远程库地址==你点击 github code 按键时出现的url</span><br><span class="line"></span><br><span class="line">//添加完成后，此时在查看git remote -v 如下图。</span><br></pre></td></tr></table></figure><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803010541208.png" alt="image-20200803010541208"></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803010839041.png" alt="image-20200803010839041"></p><h1 id="从远程仓库取数据"><a href="#从远程仓库取数据" class="headerlink" title="从远程仓库取数据"></a>从远程仓库取数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone xxx-url</span><br><span class="line">&#x2F;&#x2F;执行后，系统会默认在&#96;下载下来的文件夹中&#96;，创建一个默认origin的远程库关联。无需自己添加。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从远程获取最新版本并合并到本地</span><br><span class="line">&#x2F;&#x2F;git pull&#x3D;&#x3D;git fetch &amp; git merge </span><br><span class="line">&#x2F;&#x2F;从origin 关联的master 分支上拉取</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><h1 id="提交远程过程"><a href="#提交远程过程" class="headerlink" title="提交远程过程"></a>提交远程过程</h1><ul><li>提交到暂存区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure><ul><li>提交到本地库 【将暂存区的文件提交到本地库】</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br><span class="line">//执行完此命令会出现 一个输入。本次输入内容为这次提交的说明。会显示在github中，如下图的 first。</span><br><span class="line">//一次完成提交文件和提交说明。-m 参数后面内容==说明</span><br><span class="line">git commit -m 'xxx'  文件名</span><br></pre></td></tr></table></figure><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803000808433.png" alt=""></p><ul><li>提交到远程仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;origin关联名  ；master 分支。</span><br><span class="line">git  push -u origin master</span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//查看分支信息</span><br><span class="line">git branch [-v]</span><br><span class="line"></span><br><span class="line">//创建分支</span><br><span class="line">git branch xxx-分支名</span><br><span class="line">//切换分支</span><br><span class="line">git checkout xxx-分支名</span><br><span class="line"></span><br><span class="line">//创建并切换</span><br><span class="line">git checkout -b xxx-分支名</span><br></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>1、切换到要接受修改的分支。即需要更新的分支；</p><p>2、执行merge 命令；</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">若在master分支下创建了mydev分支 ,</span><br><span class="line">git branch mydev</span><br><span class="line">此时mydev分支下完全复制了一份master【在哪个分支下创建就，复制谁】。</span><br><span class="line">切换到mydev 分支，</span><br><span class="line">git checkout mydev</span><br><span class="line">并作修改。</span><br><span class="line">此时 master 需要将mydev的修改更新到master中，</span><br><span class="line">1、git checkout master,切换到要更新的分支；</span><br><span class="line">2、git merge mydev【需要从哪个分支上更新内容】 。</span><br><span class="line">执行结束，master中就更新了mydev的内容。</span><br></pre></td></tr></table></figure><p>3、合并分支产生冲突</p><ul><li>冲突表现：</li></ul><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803020910846.png" alt="image-20200803020910846"></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803021044141.png" alt="image-20200803021044141"></p><ul><li>冲突处理</li></ul><p>1、打开冲突文件后，</p><p>HEAD 到等号的部分为当前分支与合并分支冲突部分；</p><p>等号到&gt;&gt;&gt; mydev(合并分支名称) 为合并文件与之冲突部分。</p><p>2、编辑文件，删除特殊符号【标记冲突的符号】，并修改内容。</p><p>3、手动修改好后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git  add  xxx-冲突文件名</span><br><span class="line"></span><br><span class="line">git commit -m &#39;说明日志&#39; [无需带文件名]</span><br></pre></td></tr></table></figure><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h2><p>可通过 git status 命令  </p><p>例：</p><p>若项目存放在名为 work/ 文件夹中</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200802235647121.png" alt="image-20200802235647121"></p><p>红色：表明文件位于<strong>工作区</strong>。</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200802235906470.png" alt="image-20200802235912579"></p><p>绿色：表明文件位于<strong>暂存区</strong>。</p><h2 id="各工作空间文件操作"><a href="#各工作空间文件操作" class="headerlink" title="各工作空间文件操作"></a>各工作空间文件操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//从工作区和暂存区删除文件</span><br><span class="line">git rm xxx</span><br><span class="line"></span><br><span class="line">//  将暂存区的文件回复到工作区</span><br><span class="line">git rm --cached xxx</span><br><span class="line"></span><br><span class="line">//将暂存区文件覆盖工作区文件</span><br><span class="line">git checkout xxx</span><br><span class="line"></span><br><span class="line">//将本地库文件覆盖工作区</span><br><span class="line">git checkout HEAD xxx</span><br></pre></td></tr></table></figure><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803002946695.png" alt="image-20200803002946695"></p><h2 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//查看提交日志</span><br><span class="line">git log </span><br><span class="line">//更好看的显示</span><br><span class="line">git --pretty=oneline</span><br></pre></td></tr></table></figure><h2 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//与git log 不同在于，git log只有提交日志</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/git/image-20200803004236493.png" alt="image-20200803004236493"></p><h2 id="复位版本"><a href="#复位版本" class="headerlink" title="复位版本"></a>复位版本</h2><p>具有文件找回功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//HEAD 可以看作一个指针，表明当前版本。如上图中的HEAD。</span><br><span class="line">git reset --hard xxx索引值</span><br><span class="line">//执行完毕后，`所有区域`都会回到指定的本版（即所有文件状态复位到第几次提交的内容）</span><br><span class="line">//ps:索引值==如上图最前面的哈希值，如5873d67</span><br><span class="line"> </span><br><span class="line">git reset --hard HEAD^</span><br><span class="line">^后退一个版本，有多少个^就后退多少</span><br><span class="line">git reset --hard HEAD~n</span><br><span class="line">n 表示后退n步</span><br></pre></td></tr></table></figure><h3 id="git-reset-–参数对比"><a href="#git-reset-–参数对比" class="headerlink" title="git reset –参数对比"></a>git reset –参数对比</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--soft </span><br><span class="line">仅仅在本地库移动HEAD指针</span><br><span class="line">--mixed</span><br><span class="line">在本地库移动HEAD指针</span><br><span class="line">重置暂存区</span><br><span class="line">--hard</span><br><span class="line">在本地库移动HEAD指针</span><br><span class="line">重置暂存区</span><br><span class="line">重置工作区</span><br></pre></td></tr></table></figure><h1 id="Git基本常用命令"><a href="#Git基本常用命令" class="headerlink" title="Git基本常用命令"></a>Git基本常用命令</h1><ul><li><code>mkdir</code> XX (创建一个空目录 XX指目录名)</li><li><code>pwd</code> 显示当前目录的路径。</li><li><code>git init</code> 把当前的目录变成可以管理的git仓库，生成隐藏.git文件。</li><li><code>git add XX</code> 把xx文件添加到暂存区去。</li><li><code>git commit –m “XX”</code> 提交文件 –m 后面的是注释。</li><li><code>git status</code> 查看仓库状态</li><li><code>git diff XX</code> 查看XX文件修改了那些内容</li><li><code>git log</code> 查看历史记录</li><li>git reset –hard HEAD  或者  git reset –hard HEAD~回退到上一个版本<ul><li>(如果想回退到100个版本，使用<code>git reset –hard HEAD~100</code> )</li></ul></li><li><code>cat XX</code> 查看XX文件内容</li><li><code>git reflog</code> 查看历史记录的版本号id</li><li><code>git checkout -- XX</code> 把XX文件在工作区的修改全部撤销。</li><li><code>git rm XX</code> 删除XX文件</li><li><code>git remote add origin</code> <a href="https://github.com/Victorschenwh/obe.git" target="_blank" rel="noopener">https://github.com/Victorschenwh/obe.git</a> 关联一个远程库</li><li><code>git push –u</code>(第一次要用-u 以后不需要) <code>origin maste</code>r 把当前master分支推送到远程库</li><li><code>git clone</code><a href="https://github.com/Victorschenwh/obe.git" target="_blank" rel="noopener">https://github.com/Victorschenwh/obe.git</a> 从远程库中克隆</li><li><code>git checkout –b dev</code> 创建dev分支 并切换到dev分支上</li><li><code>git branch</code> 查看当前所有的分支</li><li><code>git checkout master</code> 切换回master分支</li><li><code>git merge dev</code> 在当前的分支上合并dev分支</li><li><code>git branch –d dev</code> 删除dev分支</li><li><code>git branch name</code> 创建分支</li><li><code>git stash</code> 把当前的工作隐藏起来 等以后恢复现场后继续工作</li><li><code>git stash list</code> 查看所有被隐藏的文件列表</li><li><code>git stash apply</code> 恢复被隐藏的文件，但是内容不删除</li><li><code>git stash drop</code> 删除文件</li><li><code>git stash pop</code> 恢复文件的同时 也删除文件</li><li><code>git remote</code> 查看远程库的信息</li><li><code>git remote –v</code> 查看远程库的详细信息</li><li><code>git push origin master</code> Git会把master分支推送到远程库对应的远程分支上</li></ul><div class="note info">                      </div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题 Time-1</title>
      <link href="/2020/07/31/ExeCode-1/"/>
      <url>/2020/07/31/ExeCode-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 笔记</title>
      <link href="/2020/07/29/pythonNote/"/>
      <url>/2020/07/29/pythonNote/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="str-amp"><a href="#str-amp" class="headerlink" title="str &amp; +"></a>str &amp; +</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#使用 “ + ”拼接时 ，只能时字符串和字符串之间的拼接。所以要使用 str()转换。</span></span><br><span class="line">print(<span class="string">"pirce is "</span>+str(<span class="number">10</span>))</span><br><span class="line">print(<span class="string">"keyword = "</span>+str([<span class="string">'False'</span>, <span class="string">'None'</span>])</span><br><span class="line"><span class="comment"># %s == str()</span></span><br><span class="line">print(<span class="string">"hello,%s,你好"</span> %(<span class="number">1234</span>))</span><br><span class="line">print(<span class="string">"hello,%s,你好"</span> %<span class="number">1234</span>)      <span class="comment">#有没有括号都可</span></span><br></pre></td></tr></table></figure><h1 id="python默认命名规则"><a href="#python默认命名规则" class="headerlink" title="python默认命名规则"></a>python默认命名规则</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apple_egg  <span class="comment">#</span></span><br></pre></td></tr></table></figure><h1 id="print"><a href="#print" class="headerlink" title="print"></a>print</h1><ul><li>print默认是打印完换行，可使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'aaa'</span>)   // 默认 end = <span class="string">'/n'</span></span><br><span class="line">print(<span class="string">'aaa'</span>, end=<span class="string">''</span>)   // 不换行</span><br><span class="line"><span class="comment">#可以使用  r''是''内部的字符串不转义 </span></span><br><span class="line">print(<span class="string">r'hello\n'</span>)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#hello\n</span></span><br></pre></td></tr></table></figure><ul><li>多语句输出</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多语句输出可用 “ ， ”分隔,默认都转换为string型输出。</span></span><br><span class="line">print(<span class="string">"dsf"</span>,num,<span class="string">"ddd"</span>)</span><br><span class="line">#结果：dsf 10 ddd</span><br></pre></td></tr></table></figure><ul><li>格式化输出</li></ul><p>格式化输出：%s ,%d ,%f，%x等；这里类似于C的格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'%.1f'</span> %(<span class="number">3.14</span>) )</span><br><span class="line">print(<span class="string">'%s'</span> %(<span class="number">3.14</span>) )</span><br><span class="line">name=<span class="string">'小明'</span></span><br><span class="line">age=<span class="number">22</span></span><br><span class="line">print(<span class="string">'我叫%s,今年我%03d岁! %%'</span>  %(name,age))</span><br><span class="line"><span class="comment">#我叫小明,今年我022岁! %</span></span><br><span class="line"><span class="comment">#用%%来表示要输出一个%，需要转义</span></span><br></pre></td></tr></table></figure><ul><li>format</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'我是&#123;&#125;'</span>.format(<span class="string">'Jam'</span>)</span><br><span class="line">str = <span class="string">'我是&#123;&#125;, 今年&#123;&#125;岁'</span>.format(name, age)</span><br></pre></td></tr></table></figure><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><ul><li><input disabled="" type="checkbox"> 如果<code>&#39;&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"i'm ok!"</span>)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#i'm ok!</span></span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> <p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code></p><p>用转义字符<code>\</code>来标识</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'i\'m \"ok\"!'</span>)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#i'm "ok"!</span></span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/PythonNote/image-20200728155546319.png" alt="">] </p><h3 id="不可变类型"><a href="#不可变类型" class="headerlink" title="不可变类型"></a>不可变类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'ABC'</span></span><br><span class="line">b = a</span><br><span class="line">a = <span class="string">'XYZ'</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#ABC</span></span><br></pre></td></tr></table></figure><p>执行过程：</p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/PythonNote/image-20200728200741629.png" alt=""></p><h3 id="可变"><a href="#可变" class="headerlink" title="可变"></a>可变</h3><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><h3 id="ord-amp-char"><a href="#ord-amp-char" class="headerlink" title="ord() &amp;char()"></a>ord() &amp;char()</h3><ul><li><code>ord()</code>函数获取字符的整数表示。</li><li><code>chr()</code>函数把编码转换为对应的字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(ord(<span class="string">'A'</span>))</span><br><span class="line">print(ord(<span class="string">'中'</span>))</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#65 </span></span><br><span class="line"><span class="comment">#20013</span></span><br><span class="line">print(chr(<span class="number">65</span>))</span><br><span class="line">print(chr(<span class="number">20013</span>))</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#A</span></span><br><span class="line"><span class="comment">#中</span></span><br></pre></td></tr></table></figure><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><ul><li>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'1+2*3**5= '</span>,eval(<span class="string">'1+2*3**5'</span>))</span><br><span class="line"><span class="comment">#结果：1+2*3**5=  487</span></span><br></pre></td></tr></table></figure><p>eval()也可以实现字符串的解析：</p><ul><li>字符串—-&gt;列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">'[[1,2,3],[4,5,6]]'</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'type of str：'</span>,type(str))</span><br><span class="line">strA=eval(str)</span><br><span class="line">print(<span class="string">'type of strA：'</span>,type(strA))</span><br><span class="line"></span><br><span class="line"><span class="comment">#result: </span></span><br><span class="line"><span class="comment">#type of str： &lt;class 'str'&gt;</span></span><br><span class="line"><span class="comment">#type of strA： &lt;class 'list'&gt;</span></span><br></pre></td></tr></table></figure><ul><li>字符串—-&gt;字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"&#123;1: 'a', 2: 'b'&#125;"</span></span><br><span class="line">print(type(a))</span><br><span class="line">b = eval(a)</span><br><span class="line">print(type(b))</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#&lt;class 'str'&gt;</span></span><br><span class="line"><span class="comment">#&lt;class 'dict'&gt;</span></span><br></pre></td></tr></table></figure><ul><li>字符串—-&gt;元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"([1,2], [3,4], [5,6], [7,8], (9,0))"</span></span><br><span class="line">print(type(a))</span><br><span class="line">b=eval(a)</span><br><span class="line">print(type(b))</span><br><span class="line"><span class="comment">#result：</span></span><br><span class="line"><span class="comment">#&lt;class 'str'&gt;</span></span><br><span class="line"><span class="comment">#&lt;class 'tuple'&gt;</span></span><br></pre></td></tr></table></figure><h1 id="list-amp-tuple"><a href="#list-amp-tuple" class="headerlink" title="list &amp; tuple"></a>list &amp; tuple</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li><input disabled="" type="checkbox"> <p>列表，list是一种有序的集合，可以随时添加和删除其中的元素。</p></li><li><input disabled="" type="checkbox"> <p>list里面的元素的数据类型也可以不同。list 的元素也可是list【有点像二维数组】。</p></li></ul><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><h4 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h4><ul><li>len()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruit=[<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>]</span><br><span class="line"></span><br><span class="line">print(len(fruit))</span><br><span class="line"></span><br><span class="line"><span class="comment">#result： 3</span></span><br></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruit=[<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>]</span><br><span class="line">fruit[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#倒数第一个，同理也可fruit[-2]==倒数第二个</span></span><br><span class="line">fruit[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><ul><li>append()</li></ul><p>追加在list末尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruit=[<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>]</span><br><span class="line">fruit.append(<span class="string">'banana'</span>)</span><br><span class="line">print(fruit)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['apple','peach','orange','banana']</span></span><br></pre></td></tr></table></figure><ul><li>insert()</li></ul><p>插入指定位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruit=[<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>]</span><br><span class="line">fruit.insert(<span class="number">1</span>,<span class="string">'banana'</span>)</span><br><span class="line">print(fruit)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['apple','banana','peach','orange']</span></span><br></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><ul><li>pop()</li></ul><p>1、pop()，不加索引，删除list末尾元素。</p><p>2、pop(index)，加索引，删除list指定元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fruit=[<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>]</span><br><span class="line">fruit.pop()</span><br><span class="line">print(fruit)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['apple','peach']</span></span><br><span class="line"><span class="comment">#############</span></span><br><span class="line">fruit.pop(<span class="number">1</span>)</span><br><span class="line">print(fruit)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['apple','orange']</span></span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>sort(key=None, reverse=False)</li></ul><p>key–主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</p><p>reverse–排序规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">list_a=[<span class="string">'1'</span>,<span class="string">'3'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'2'</span>]</span><br><span class="line">list_a.sort()</span><br><span class="line">print(list_a)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['1', '2', '3', '6', '7']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">random = [(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">take_FeedBack</span><span class="params">(elem)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> elem[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># for i in random:</span></span><br><span class="line"><span class="comment">#     print(take_FeedBack(i))</span></span><br><span class="line">random.sort(key=take_FeedBack)</span><br><span class="line">print(<span class="string">'random ：'</span> ,random)</span><br><span class="line">random ： [(<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><ul><li><input disabled="" type="checkbox"> tuple和list非常类似，但是tuple一旦初始化就不能修改。</li><li><input disabled="" type="checkbox"> tuple里面的元素的数据类型也可以不同。tuple的元素也可是tuple【有点像二维数组】。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fruit=(<span class="string">'apple'</span>,<span class="string">'peach'</span>,<span class="string">'orange'</span>)</span><br><span class="line"><span class="comment">#如果你定义只有一个元素的tuple，不能写成</span></span><br><span class="line">t=(<span class="string">'apple'</span>)</span><br><span class="line">print(type(t))</span><br><span class="line"><span class="comment">#否则 t 就是个普通的字符串(或者其他基本数据类型) </span></span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#&lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#必须写成 带个 `,`的形式</span></span><br><span class="line">t=(<span class="string">'apple'</span>,)</span><br><span class="line">print(type(t))</span><br><span class="line"><span class="comment">#&lt;class 'tuple'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="‘可变的’tuple"><a href="#‘可变的’tuple" class="headerlink" title="‘可变的’tuple"></a>‘可变的’tuple</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tuple是不可变的，但我们可以添加可变的元素。</span></span><br><span class="line">t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line">t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line">t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'Y'</span></span><br><span class="line">print(t)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'X'</span>, <span class="string">'Y'</span>])</span><br></pre></td></tr></table></figure><p>注意：</p><p>只有添加了可变数据类型才能这么改，否则无效。因为不变数据类型的地址在改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tTwo=(<span class="string">'apple'</span>,name,age,[<span class="string">'A'</span>,<span class="string">'B'</span>],&#123;<span class="string">'a'</span>:<span class="string">'好的'</span>,<span class="string">'b'</span>:<span class="string">'一般'</span>&#125;)</span><br><span class="line">tTwo[<span class="number">3</span>][<span class="number">0</span>]=<span class="string">'K'</span></span><br><span class="line">tTwo[<span class="number">4</span>][<span class="string">'a'</span>]=<span class="string">'不好'</span></span><br><span class="line">print(tTwo)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#('apple', '小明', 22, ['K', 'B'], &#123;'a': '不好', 'b': '一般'&#125;)</span></span><br></pre></td></tr></table></figure><h1 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h1><h2 id="dict和list比较"><a href="#dict和list比较" class="headerlink" title="dict和list比较"></a>dict和list比较</h2><p>dict有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而list相反：</p><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。</li></ol><p>注：</p><p>key 必须为不可变数据类型，如整数，字符串等</p><h2 id="判断键值是否存在"><a href="#判断键值是否存在" class="headerlink" title="判断键值是否存在"></a>判断键值是否存在</h2><ul><li>get(key)</li></ul><p>有key，则return key_value; 无key，则return None</p><ul><li>get(key, return flag)</li></ul><p>有key，则return key_value; 无key，则return 指定的return flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict_one = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br><span class="line">print(dict_one.get(<span class="string">'Bob'</span>,<span class="number">-1</span>))</span><br><span class="line"><span class="comment">#print(dict_one.get('Bobb','啥都没有'))</span></span><br><span class="line">print(dict_one[<span class="string">'Bob'</span>])</span><br><span class="line"><span class="comment">#75</span></span><br><span class="line"><span class="comment">#啥都没有</span></span><br><span class="line"><span class="comment">#75</span></span><br></pre></td></tr></table></figure><h2 id="获取所有键值"><a href="#获取所有键值" class="headerlink" title="获取所有键值"></a>获取所有键值</h2><ul><li>keys() </li></ul><p>以列表返回一个字典的所有的键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_a=&#123;<span class="string">'name'</span>:<span class="number">1</span>,<span class="string">'age'</span>:<span class="number">2.3</span>,<span class="string">'year'</span>:<span class="number">4</span>&#125;</span><br><span class="line">print(dict_a.keys())</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#dict_keys(['name', 'age', 'year'])</span></span><br></pre></td></tr></table></figure><h2 id="获取所有数值"><a href="#获取所有数值" class="headerlink" title="获取所有数值"></a>获取所有数值</h2><ul><li>values()</li></ul><p>以列表返回字典中的所有值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_a=&#123;<span class="string">'name'</span>:<span class="number">1</span>,<span class="string">'age'</span>:<span class="number">2.3</span>,<span class="string">'year'</span>:<span class="number">4</span>&#125;</span><br><span class="line">print(dict_a.values())</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#dict_values([1, 2.3, 4])</span></span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_a=&#123;<span class="string">'name'</span>:<span class="number">1</span>,<span class="string">'age'</span>:<span class="number">2.3</span>,<span class="string">'year'</span>:<span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dict_a[<span class="string">'Name'</span>]  <span class="comment"># 删除键是'Name'的条目</span></span><br><span class="line">dict_a.clear()     <span class="comment"># 清空字典所有条目</span></span><br><span class="line"><span class="keyword">del</span> dict          <span class="comment"># 删除字典</span></span><br></pre></td></tr></table></figure><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><ul><li><input disabled="" type="checkbox"> set可以看成数学意义上的无序和无重复元素的集合，无序的。</li><li><input disabled="" type="checkbox"> set和dict类似，也是一组key的集合，但不存储value。不可以放入可变对象。</li><li><input disabled="" type="checkbox"> 创建一个set，需要提供一个list作为输入集合。</li><li><input disabled="" type="checkbox"> 重复元素在set中自动被过滤。</li><li><input disabled="" type="checkbox"> 元素类型要一致</li></ul><h2 id="运算-1"><a href="#运算-1" class="headerlink" title="运算"></a>运算</h2><h3 id="amp-交集"><a href="#amp-交集" class="headerlink" title="&amp; 交集"></a>&amp; 交集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set_one=set([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">set_tow=set([<span class="string">'a'</span>,<span class="string">'4'</span>,<span class="string">'d'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>])</span><br><span class="line">print(set_one &amp; set_tow)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#&#123;'d', 'a'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="并集"><a href="#并集" class="headerlink" title="| 并集"></a>| 并集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set_one=set([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">set_tow=set([<span class="string">'a'</span>,<span class="string">'4'</span>,<span class="string">'d'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>])</span><br><span class="line">print(set_one | set_tow)</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#&#123;'7', 'b', 'c', '4', '6', 'd', 'a'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h2><ul><li>add(key)</li></ul><h2 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h2><ul><li>remove(key)</li></ul><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><ul><li>repalce(old,new[,max])</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str_b=<span class="string">'random'</span></span><br><span class="line">str_c=str_b.replace(<span class="string">'r'</span>,<span class="string">'R'</span>)</span><br><span class="line">print(<span class="string">'str_b==%s ，str_c==%s'</span> %(str_b,str_c))</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#str_b==random ，str_c==Random</span></span><br><span class="line"></span><br><span class="line">str_b=<span class="string">'rrrrom'</span></span><br><span class="line">str_c=str_b.replace(<span class="string">'r'</span>,<span class="string">'R'</span>,<span class="number">2</span>)</span><br><span class="line">print(<span class="string">'str_b==%s ，str_c==%s'</span> %(str_b,str_c))</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#str_b==rrrrom ，str_c==RRrrom</span></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_test</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="comment">#isinstance 检测参数 x 是否为符合（）中的内容。</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x,(int,float)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'illegal param'</span>)</span><br><span class="line">    <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">if</span> x&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">print(my_test(<span class="number">-1.2</span>))</span><br></pre></td></tr></table></figure><h2 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    _sqrt=math.sqrt(b**<span class="number">2</span><span class="number">-4</span>*a*c)</span><br><span class="line">    result_plus = (-b + _sqrt) /(<span class="number">2.0</span> * a)</span><br><span class="line">    result_sub = (-b - _sqrt) / (<span class="number">2.0</span> * a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result_plus,result_sub</span><br><span class="line">print(type(quadratic(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>)))</span><br><span class="line"><span class="comment">#当函数返回多个值，是以tuple的方式返回的。</span></span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#&lt;class 'tuple'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p> <code>定义默认参数要牢记一点：默认参数必须指向不变对象！</code>,否则需要特殊处理。</p><p>错误使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认参数L=[]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line">正常调用时：</span><br><span class="line"><span class="comment">#自己添加参数，不用默认参数。</span></span><br><span class="line">add_end([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'END'</span>]</span><br><span class="line">add_end([<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>])</span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#['x', 'y', 'z', 'END']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用默认参数调用</span></span><br><span class="line">add_end()</span><br><span class="line">[<span class="string">'END'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#但再次调用时，就错误了</span></span><br><span class="line">add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>]</span><br><span class="line">add_end()</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#['END', 'END', 'END']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#因为list时可变数据类型，每次调用就增添一个 END。</span></span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul><li><h6 id="如果参数个数不确定可以把参数组装为一个list或tuple传进去。"><a href="#如果参数个数不确定可以把参数组装为一个list或tuple传进去。" class="headerlink" title="如果参数个数不确定可以把参数组装为一个list或tuple传进去。"></a>如果参数个数不确定可以把参数组装为一个list或tuple传进去。</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_test</span><span class="params">(parms)</span>:</span></span><br><span class="line">print(parms)</span><br><span class="line"><span class="comment">#先将要传的参数组装成一个list或者tuple</span></span><br><span class="line">my_parms=[<span class="number">1</span>,<span class="string">'Mike'</span>,name]</span><br><span class="line"><span class="comment">#作为一个参数传进去，系统会把传进来的参数，打包成tuple的形式，供用户自己处理和使用。</span></span><br><span class="line">function_test(my_parms)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#(1,'Mike',name)</span></span><br></pre></td></tr></table></figure><ul><li><h6 id="如果使用可变参数就可以简化，不用事先把参数组装。"><a href="#如果使用可变参数就可以简化，不用事先把参数组装。" class="headerlink" title="如果使用可变参数就可以简化，不用事先把参数组装。"></a>如果使用<u><code>可变参数</code></u>就可以简化，不用事先把参数组装。</h6></li></ul><p>具体实现：参数前面加个  ’  *  ‘。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_test</span><span class="params">(*parms)</span>:</span></span><br><span class="line">print(parms)</span><br><span class="line"><span class="comment">#无需事先组装</span></span><br><span class="line"><span class="comment">#把需要的参数直接传入，系统会把传进来的参数，打包成tuple的形式，供用户自己处理和使用。</span></span><br><span class="line">function_test(<span class="number">1</span>,<span class="string">'Mike'</span>,name)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#(1,'Mike',name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果已有了一个lsit或tuple，也可调用可变参数函数。</span></span><br><span class="line"><span class="comment">#具体实现：在list或者tuple前添加 ’*‘。</span></span><br><span class="line">my_parms=[<span class="number">1</span>,<span class="string">'Mike'</span>,name]</span><br><span class="line">function_test(*my_parms)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#(1,'Mike',name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不加 "*",可变参数函数系统会默认把传入的list，当作一个整体，再打包成一个tuple</span></span><br><span class="line">my_parms=[<span class="number">1</span>,<span class="string">'Mike'</span>,name]</span><br><span class="line">function_test(my_parms)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#((1,'Mike',name),)</span></span><br></pre></td></tr></table></figure><h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><ul><li><input disabled="" type="checkbox"> 可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</li></ul><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><ul><li>方法一</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_parm_test</span><span class="params">(**kw)</span>:</span></span><br><span class="line">    print(type(kw))</span><br><span class="line">    print(kw)</span><br><span class="line">dict_a=&#123;<span class="string">'name'</span>:<span class="number">1</span>,<span class="string">'age'</span>:<span class="number">2.3</span>,<span class="string">'year'</span>:<span class="number">4</span>&#125;</span><br><span class="line">key_parm_test(**dict_a)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#&lt;class 'dict'&gt;</span></span><br><span class="line"><span class="comment">#&#123;'name': 1, 'age': 2.3, 'year': 4&#125;</span></span><br></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_parm_test</span><span class="params">(**kw)</span>:</span></span><br><span class="line">    print(type(kw))</span><br><span class="line">    print(kw)</span><br><span class="line">key_parm_test(name=<span class="number">1</span>,age=<span class="number">2.3</span>,year=<span class="number">4</span>)</span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="comment">#&lt;class 'dict'&gt;</span></span><br><span class="line"><span class="comment">#&#123;'name': 1, 'age': 2.3, 'year': 4&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读消费社会有感</title>
      <link href="/2020/07/25/blog-05/"/>
      <url>/2020/07/25/blog-05/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><p><strong>让·鲍德里亚把人们消费的欲望刨析的十分深刻。但我觉得消费社会是必然也是必须。没有人们近乎疯狂的消费欲望，大概率不会有现代社会。而生产力的不断发展，消费品必定泛滥。所以说消费社会的存在是合理的。</strong></p><p><strong>但是有个问题，卖家为了创造人们消费的欲望，于是不断的塑造出眼花缭乱的消费品。于是乎，人们慢慢失去了对价值观的标准选择权。他们被卖家拿去。回头看看如今市面上的所有消费品都是“人造的”。卖家生产什么我们就只能选择什么。所谓的潮流，也都是“人云亦云”。卖家给了我们一个“虚幻的自由选择权力”，他们选择的，才是我们的选择。然后潜移默化的影响着每个人。比如，结婚需要穿婚纱。尽管会有人说你不穿婚纱，不还是要穿凤冠霞帔。对，问题就在这里。人与人的关系本来就是统治与被统治的关系，只是谁是统治者谁是被统治者的问题。那为什么要把这个机会让给别人呢。</strong></p><div class="note info">                      </div>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消费社会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同电脑与同个github仓库同步</title>
      <link href="/2020/07/24/blog-04/"/>
      <url>/2020/07/24/blog-04/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>由于换了新的电脑，想同时实现使用 原电脑 和 新电脑 都可发布博客。</strong></p><div class="note primary no-icon">                      </div><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p><strong>将原电脑存放blog的整个文件夹复制一份；</strong></p><p><strong>将C:\Users\原电脑用户名\下的 ① <u>“  .ssh ”文件夹</u>；②<u>“ .gitconfig ”文件</u>；③<u>“ .npmrc ”文件</u>。④“原博客本地仓库”</strong></p><h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><p><strong>①中存放原电脑与Blog仓库配对后生成的SSH的密钥；</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//原电脑通过此命令配置的</span><br><span class="line">//这里直接复制.ssh文件后，无需执行此命令</span><br><span class="line">//【千万不能执行，否则SSH密钥就不同了，无法与原博客仓库配对】。</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><strong>②中是github的用户名和邮箱地址；</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//原电脑通过此命令配置，生成了.gitconfig文件</span><br><span class="line">//这里直接复制.gitconfig文件后，无需执行此命令</span><br><span class="line">//用户名和邮箱都是你github的用户名和邮箱</span><br><span class="line">git config --global user.name "你的用户名"</span><br><span class="line">git config --global user.email “你的邮箱”</span><br></pre></td></tr></table></figure><p><strong>③中将npm 下载路径改为了国内镜像taobao，方便下载。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//原电脑通过此命令配置，生成了.npmrc文件</span><br><span class="line">//这里直接复制.npmrc文件后，无需执行此命令</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><strong>④中存放原本地仓库中的文件。也可通过git 命令同步到本地，但是不方便。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库地址</span><br></pre></td></tr></table></figure><h2 id="新电脑新建文件夹"><a href="#新电脑新建文件夹" class="headerlink" title="新电脑新建文件夹"></a>新电脑新建文件夹</h2><p><strong>新电脑上找到你要放置本地仓库的路径。然后开始。</strong></p><p><strong>在git bash 中将当前路径切换到，你要放置本地仓库文件夹上一级。</strong></p><p><strong>例：你想放在E:/mybog文件夹下，则 cd  /e。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装hexo框架</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等上一个命令完成后，在输入下面的命令</span></span><br><span class="line">hexo init &lt;文件夹的名称&gt;  #初始化文件夹,【无需手动创建】。</span><br><span class="line">cd &lt;新建文件夹的名称&gt;</span><br><span class="line">npm install  # 安装博客所需要的依赖文件</span><br></pre></td></tr></table></figure><h2 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h2><p><strong>将原电脑复制的文件，原封不动的粘贴到每个文件对应的路径中。</strong></p><p><strong>完成后可以通过此命令，看是否添加本地成功。若回复中 Hi后面是你的用户名，就OK。其他信息可忽略。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//测试联通性</span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github.com</span></span><br></pre></td></tr></table></figure><h2 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h2><p><strong>安装hexo-deployer-git 插件，将博客部署到git上。【无此插件，就无法部署】</strong></p><p><strong>在本地博客仓库目录下，运行命令。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><h1 id="此时就可在新电脑上发布博客了。"><a href="#此时就可在新电脑上发布博客了。" class="headerlink" title="此时就可在新电脑上发布博客了。"></a>此时就可在新电脑上发布博客了。</h1><div class="note info">                      </div>]]></content>
      
      
      <categories>
          
          <category> blog搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小记</title>
      <link href="/2020/07/24/blog-03/"/>
      <url>/2020/07/24/blog-03/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><p>​    <strong>虽然很长一段时间我都发觉自己心浮气躁，但懒于或者说畏惧面对。可是最近几天察觉到这个问题，已经显而易见的影响到我的整个生活节奏。于是，想到了读本书。我这才发觉，已经很久没有碰除课本和专业书籍以外的书了。如果说原因的话，可能我已经习惯了”快生活”。看个视频都要开2倍速，又哪来的耐心一字一句的读书呢？每次遇到问题也都习惯性去找个别人整理好的“快速手册”。好像周围的人也这样！于是把我的心养“快”了。我想不心浮气躁也就怪了。</strong></p><p>​    <strong>看电影也曾是我觉得可以使心慢下来的选择之一。然而，突然记起朋友说：“看电影很枯燥，因为所有的情节画面都是设定好的，毫无想象力。我那时对这个说法嗤之以鼻，甚至心里嘲笑他的“无知”。可此刻我突然意识到这句话才是我为什么心浮气躁的深层原因，对此我总结出“人云亦云”。</strong></p><p>​    <strong>人家说啥即是啥，慢慢放弃了自我思考。无论什么都百度一下。于是如浮萍一样，飘荡在人海中。于是便心浮气躁，抓不着“根”。更别提“一千人眼中有一千个哈姆雷特”的乐趣了。</strong></p><p>​    <strong>今天记录下，愿自己不骄不躁，捧起书。</strong></p><div class="note info">                      </div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死亡</title>
      <link href="/2020/07/02/blog-02/"/>
      <url>/2020/07/02/blog-02/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="死亡"><a href="#死亡" class="headerlink" title="死亡"></a>死亡</h1><p><strong>关于死亡：</strong><br>    <strong>不知道第几次又想到这个话题，看到这两个字都会心紧紧提起，肥肉狂抖。</strong></p><p>​    <strong>第一次对死亡这件事有概念，大概是记忆里外婆家的小西屋里似乎住着一个拄着拐杖的老太，一身黑色的衣服，看不清脸，可能是男老太或是女老太，今年问起外公才知道他们先后都住过。后来小西屋就变成了杂物间，冬天可以在那里烤炉子，烤红薯，烤馒头，还烫化了我的一双棉靴的鞋底。再后来，外婆也住进了那间小西屋，窗台外放着一个黄色的皮沙发，冬天可以在那里晒太阳。</strong></p><p>​    <strong>第一次对死亡这件事有画面，是初中还是高中，半夜做梦哭醒。梦见死后的葬礼，我的墓碑前站着一片穿着黑色的人，我不知道自己是一颗粒子还是缩小的自己。时代像放电影一样x N倍速播放，我飘到了🌍的最外圈，地球在自转，我在看，地球在公转，我在看，一直在看。这个画面伴随我到现在，偶尔也会重复这个梦，更多的是最后那个在地球外看着它转的瞬间，空无一人之境的荒寂，总会让我的肌肉不由自主的抖动。</strong></p><p>​    <strong>他们劝我说，没有人能逃过死亡。我知道，可是我知道和我不能接受这两件事并不冲突，每一次提起我都有第一次的紧张感，和更紧张的肌肉反应。也许我能。</strong></p><div class="note info">            <p>~来自龙猫小姐的兔子朋友的祝福</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜</title>
      <link href="/2020/07/01/blog-01/"/>
      <url>/2020/07/01/blog-01/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><h1 id="夜"><a href="#夜" class="headerlink" title="夜"></a>夜</h1><p><strong>关于夜晚：</strong></p><p><strong>突然觉得用万籁俱寂来形容乡村的夏天夜晚是不太恰当的。</strong></p><p><strong>傍晚六点，躲避了一天太阳的人们趁着夕阳的余晖串门聊天；洗漱完成后，七点钟，每家每户响起了新闻联播的声音，这似乎是没有网上冲浪的人们得知外界新鲜消息的唯一途径；七点三十五分，天气预报也是必选节目，得知未来几天的天气走向是农民的每日必做题；到了九点，村子里的大部分生物都进入了一天的休息模式，但总有一些不从众的动物，听取蛙声一片是非常准确的，不论走到哪里都好像走进了蛙圈，不知道谁家的狗会叫几声亮亮嗓子，还是在和没睡的同伴交流着什么。</strong></p><p><strong>夜晚的风好像都是会呼吸的，总觉得风带来了一些什么声音，静下来仔细去听总是若有若无的。不知道还能再看几次这样的夜晚，有一枚特别亮的月亮，几十颗闪闪发光的星星和特别黑的夜晚。星星，这个词语真的很适合描述这个事物，它亮了一段时间之后就会灭掉，一瞬间融入黑夜之中，好像那儿什么都没有出现过。</strong></p><div class="note info">            <p>~来自龙猫小姐的兔子朋友的祝福</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>aboutMe</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon">                      </div><p>本站建于2020 年07 夏。</p><p>本人普普通通，这也是本站被叫做DIDI的原因之一。（当然还有其他因素）</p><p>不知道为什么搭建了此站，就像你也不知道为何就来到了这里。~缘分😄</p><div class="note warning">            <p>寄 语</p>          </div><p>时间是我们唯一的财富。让我们好好生活，勤于学习吧。</p><div class="note info">            <p>PigG</p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>说点什么吧~</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[<p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/kwxz16.jpg" alt=""></p><div class="note danger">            <p>悄悄话：~ 你很棒！</p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Gallery</title>
      <link href="/photoes/index.html"/>
      <url>/photoes/index.html</url>
      
        <content type="html"><![CDATA[<br/><div class="note primary no-icon">                      </div><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src='https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/qdjqyq.jpg'>  <figcaption>  <div class="gallery-group-name">壁紙</div>  <p>收藏的一些壁紙</p>  <a href='/photoes/wallpaper/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg'>  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>關於漫威的圖片</p>  <a href='/photoes/marvel/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src='https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/x1d7l3.jpg'>  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>關於MY GIRL的圖片</p>  <a href='/photoes/girls/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src='https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/1j1ez9.jpg'>  <figcaption>  <div class="gallery-group-name">TopImg</div>  <p>标题图片</p>  <a href='/photoes/BlogBG/'></a>  </figcaption>  </figure>  </div><br/><div class="note info">                      </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>BlogBG</title>
      <link href="/photoes/BlogBG/index.html"/>
      <url>/photoes/BlogBG/index.html</url>
      
        <content type="html"><![CDATA[<br/><div class="note primary no-icon">                      </div><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/42e9m9.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/45wrg9.png" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/nzr55g.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/1j1ez9.jpg" alt=""></p><br/><div class="note info">                      </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>girls</title>
      <link href="/photoes/girls/index.html"/>
      <url>/photoes/girls/index.html</url>
      
        <content type="html"><![CDATA[<br/><div class="note primary no-icon">                      </div><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/x1d7l3.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/lmkeey.png" alt=""></p><br/><div class="note info">                      </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>marvel</title>
      <link href="/photoes/marvel/index.html"/>
      <url>/photoes/marvel/index.html</url>
      
        <content type="html"><![CDATA[<br/><div class="note primary no-icon">                      </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>wallpaper</title>
      <link href="/photoes/wallpaper/index.html"/>
      <url>/photoes/wallpaper/index.html</url>
      
        <content type="html"><![CDATA[<br/><div class="note primary no-icon">                      </div><div class="justified-gallery"><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/lmkeey.png" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/39gr53.jpg" alt=""></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/4ve7dl.jpg" alt=""></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/eo19kw.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/g8drv7.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/kwxz16.jpg" alt=""></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/ne78w4.jpg" alt=""></p><p><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/qdjqyq.jpg" alt=""><br><img src= "https://wx2.sbimg.cn/2020/07/02/2ZPCd.gif" data-src="https://picbed-1258993773.cos.ap-nanjing.myqcloud.com/gallery/x1d7l3.jpg" alt=""></p>          </div><br/><div class="note info">                      </div>]]></content>
      
    </entry>
    
    
  
</search>
